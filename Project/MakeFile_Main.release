include Project/release.chk
include Project/customer_release/c_release.chk
ifneq ($(strip $(CUSTOM)),)
include Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
else
CUSTOM=RT
include Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif
include Project/dir.mak
include Project/rule.mak

export CFG_CFLAGS = -msoft-float -fomit-frame-pointer

#translate "PROFILE" to upper case. Example:"dsl-n66u" => "DSL-N66U"
export UC_PROFILE = $(shell echo $(PROFILE) | sed 's/\(.*\)/\U\1/')

#translate dash to underscore. "DSL-N66U-A-B-C" => "DSL_N66U_A_B_C"
export US_PROFILE = $(shell echo $(UC_PROFILE) | sed 's/-/_/g')

TC_CFLAGS +=-D$(US_PROFILE)

ifneq ($(strip $(TCSUPPORT_WLAN_RT6856)),)
WLAN_DRIVER_NAME=module-v2.5.1.1
else ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
WLAN_DRIVER_NAME=RT5392_Linux_AP_V2.5.0.0_DPA
else ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
WLAN_DRIVER_NAME=RT5392_Linux_AP_V2.5.0.0_DPA
else ifneq ($(strip $(TCSUPPORT_WLAN_RT3092)),)
WLAN_DRIVER_NAME=ASUS_RT5392_Linux_AP_V2.7.1.3_DPA
else ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
WLAN_DRIVER_NAME=DPA_RT5592_RT5392_LinuxAP_V2.7.x.x
endif


#Cross Compile Setup
nullstring :=
space :=$(nullstring) #end of line
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
export PATH :=/opt/trendchip/mips-linux-3.4.6/bin:$(PATH)
export HOST=mips-linux-
#export CROSS=/opt/trendchip/mips-linux-3.4.6/bin/mips-linux-
export CROSS=mips-linux-
export CROSS_COMPILE=$(CROSS)
export CC=$(CROSS)gcc
export LD=$(CROSS)ld
export AR=$(CROSS)ar
export STRIP=$(CROSS)strip
TC3162_CFLAG=$(space)-mips1 -msoft-float
CFG_CFLAGS += -mips1
endif

ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-uclibc)
export PATH :=/opt/trendchip/mips-linux-uclibc/usr/bin:$(PATH)
export HOST=mips-linux
export CROSS=mips-linux-uclibc-
export CROSS_COMPILE=$(CROSS)
export CC=mips-linux-uclibc-gcc -mips32r2 -msoft-float
export STRIP=mips-linux-uclibc-strip
export SYSROOT=/opt/trendchip/mips-linux-uclibc
CFG_CFLAGS += -mips32r2 -muclibc
endif


ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
CFG_CFLAGS += -Os
else
CFG_CFLAGS += -O2
endif


TC3262_DRIVERS := $(TCSUPPORT_CPU_TC3262) $(TCSUPPORT_CPU_TC3182) $(TCSUPPORT_CPU_RT63165) $(TCSUPPORT_CPU_RT65168)

#Detect Release Code
ifneq ($(strip $(RELEASEBSP)),)
#unexport Compile Env of SDRAM Size
unexport 8M
unexport 16M
unexport 32M
unexport 64M
unexport TCSUPPORT_SDRAM_8M
unexport TCSUPPORT_SDRAM_16M
unexport TCSUPPORT_SDRAM_32M
unexport TCSUPPORT_SDRAM_64M

include Project/release.mak
endif

#for customer release
ifneq ($(strip $(CUSTOMERRELEASE)),)
include Project/customer_release/customer_release
endif


All: trx_clean clean_fs bootbase kernel modules apps buildimage

clean: trx_clean clean_fs bootbase_clean kernel_clean modules_clean apps_clean 
	rm -rf $(PROJECT_DIR)/images/*

menuconfig:
	echo "Project menuconfig"
	cp $(PROFILE_DIR)/$(PROFILE).profile  $(PROJECT_MENUCONFIG_DIR)/.config		
ifneq ($(strip $(CUSTOM)),)
	echo "#Custom menuconfig" > $(PROJECT_MENUCONFIG_DIR)/CustomConfig;
	if test -e $(PROJECT_MENUCONFIG_DIR)/$(CUSTOM).config; \
	then cat $(PROJECT_MENUCONFIG_DIR)/$(CUSTOM).config > $(PROJECT_MENUCONFIG_DIR)/CustomConfig; \
	fi
endif		
	$(MAKE) -C $(PROJECT_MENUCONFIG_DIR) menuconfig
	cp $(PROJECT_MENUCONFIG_DIR)/.config $(PROFILE_DIR)/$(PROFILE).profile	

clean_fs:
	chmod -R 777 $(PROJECT_DIR)
	chmod -R 777 $(KERNEL_DIR)
	chmod -R 777 $(APP_DIR)
	chmod -R 777 $(FILESYSTEM_DIR)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	chmod -R 777 $(MODULE_DIR)
else
	chmod -R 777 $(MODULES_PRIV_SRC_DIR)
endif

	#check directory
	if [ ! -e $(FILESYSTEM_DIR)/proc ]; then mkdir $(FILESYSTEM_DIR)/proc; fi
	if [ ! -e $(FILESYSTEM_DIR)/tmp ]; then mkdir $(FILESYSTEM_DIR)/tmp; fi
	if [ ! -e $(FILESYSTEM_DIR)/sys ]; then mkdir $(FILESYSTEM_DIR)/sys; fi
	if [ ! -e $(FILESYSTEM_DIR)/lib ]; then mkdir $(FILESYSTEM_DIR)/lib; fi
	if [ ! -e $(FILESYSTEM_DIR)/sbin ]; then mkdir $(FILESYSTEM_DIR)/sbin; fi
	if [ ! -e $(FILESYSTEM_DIR)/userfs/bin ]; then mkdir $(FILESYSTEM_DIR)/userfs/bin; fi
	if [ ! -e $(FILESYSTEM_DIR)/usr/bin ]; then mkdir $(FILESYSTEM_DIR)/usr/bin; fi
	if [ ! -e $(PROJECT_DIR)/images ]; then mkdir $(PROJECT_DIR)/images; fi

	chmod -R 777 $(TOOLS_DIR)
	chmod -R 777 $(BOOTROM_DIR)
	rm -rf $(FILESYSTEM_DIR)/lib/*
	rm -rf $(FILESYSTEM_DIR)/bin/*
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/*
	rm -rf $(FILESYSTEM_DIR)/userfs/dlna
	rm -rf $(FILESYSTEM_DIR)/usr/bin/*
	rm -rf $(FILESYSTEM_DIR)/sbin/*
	mkdir $(FILESYSTEM_DIR)/lib/modules
	find $(FILESYSTEM_DIR) -name "dummpy.file" | xargs rm -f

tools_clean:squashfstools_clean trx_clean

tools:squashfstools trx

trx:
	make -C $(TOOLS_DIR)/trx

trx_clean:
	make -C $(TOOLS_DIR)/trx clean

squashfstools:lzma
	make -C $(TOOLS_DIR)/squashfs-tools
	cp $(TOOLS_DIR)/squashfs-tools/mksquashfs  $(TOOLS_DIR)
	cp $(TOOLS_DIR)/squashfs-tools/mksquashfs-lzma $(TOOLS_DIR)
	cp $(TOOLS_DIR)/squashfs-tools/unsquashfs $(TOOLS_DIR)

squashfstools_clean:lzma_clean
	make -C $(TOOLS_DIR)/squashfs-tools clean
	rm -f $(TOOLS_DIR)/mksquashfs
	rm -f $(TOOLS_DIR)/mksquashfs-lzma
	rm -f $(TOOLS_DIR)/unsquashfs 

lzma:
	make -C  $(LZMA_LIB) 
	cp -f  $(LZMA_ALONE)/makefile.gcc $(LZMA_ALONE)/makefile
	make -C $(LZMA_ALONE)
	cp -f $(LZMA_ALONE)/lzma $(TOOLS_DIR)

lzma_clean:
	cp -f  $(LZMA_ALONE)/makefile.gcc $(LZMA_ALONE)/makefile
	make -C $(LZMA_LIB) clean
	make -C $(LZMA_ALONE) clean
	rm -f $(TOOLS_DIR)/lzma

mlCheckHash:
	make -C $(TOOLS_DIR)/mlCheckHash

mlCheckHash_clean:
	make -C $(TOOLS_DIR)/mlCheckHash clean


checktools:
	echo making compile options checking  tools
#	make -C $(TOOLS_DIR)/cplopts_checktool clean
	make -C $(TOOLS_DIR)/cplopts_checktool
	cp -f $(TOOLS_DIR)/cplopts_checktool/cplopts_formcheck $(TOOLS_DIR)
	cp -f $(TOOLS_DIR)/cplopts_checktool/cplopts_remove $(TOOLS_DIR)

checktools_clean:
	echo cleaning compile options checking  tools
	make -C $(TOOLS_DIR)/cplopts_checktool clean


bootbase_check:restore checktools
	$(TOOLS_DIR)/cplopts_formcheck $(BOOTROM_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile

apps_check: restore checktools
	$(TOOLS_DIR)/cplopts_formcheck $(APP_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile 

kernel_check:restore checktools
	$(TOOLS_DIR)/cplopts_formcheck $(KERNEL_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile

all_check:checktools
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	then echo "Please restore the files first before any modification!"; exit 1; \
	else echo "executing all check"; \
	fi

ifneq ($(strip $(CHKDIR)),)
	echo "checking CHDIR"
	$(TOOLS_DIR)/cplopts_formcheck $(TRUNK_DIR)/$(CHKDIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
else
	echo "checking all files in trunk dir"
	$(TOOLS_DIR)/cplopts_formcheck $(TRUNK_DIR) $(PROJECT_DIR)/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile
endif
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/error; \
	then echo "Compile code error"; exit 1; \
	else echo "Compile code success"; \
	fi

restore:checktools
	if test -e $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	then echo "Compile bootbase success"; \
	/bin/sh $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	rm -f $(TOOLS_DIR)/cplopts_checktool/tmp/restore.sh; \
	rm -rf $(TRUNK_DIR)/backup; \
	fi
	echo "Files  restored!" 

bootethdrv:
	echo "Build bootrom ethernet driver"
	$(MAKE) -C $(BOOTROM_DIR)/ethdrv all

bootbase:bootbase_clean
	echo "Build bootrom"

	if test -e $(PROFILE_DIR)/mi.conf; \
	then cp $(PROFILE_DIR)/mi.conf $(BOOTROM_DIR)/mi.conf; \
	fi
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)

ifneq ($(strip $(TCSUPPORT_SDRAM_16M)),)
	cp $(BOOTROM_DIR)/$(TCPLATFORM)/boot_16M.bin $(BOOTROM_DIR)/boot.bin
endif

ifneq ($(strip $(TCSUPPORT_SDRAM_32M)),)
	cp $(BOOTROM_DIR)/$(TCPLATFORM)/boot_32M.bin $(BOOTROM_DIR)/boot.bin
endif

ifneq ($(strip $(TCSUPPORT_SDRAM_64M)),)
	cp $(BOOTROM_DIR)/$(TCPLATFORM)/boot_64M.bin $(BOOTROM_DIR)/boot.bin
endif

endif

# Support Bootloader Compression, frankliao added 20100803
ifneq ($(strip $(TCSUPPORT_BOOT_LZMA)),)
	$(MAKE) -C $(BOOTROM_DIR) bootlzma
else
	$(MAKE) -C $(BOOTROM_DIR) bootload
endif

	if test -e $(BOOTROM_DIR)/tcboot.bin; \
	then echo "Compile bootbase success"; \
	else echo "Compile bootbase error!"; exit 1; \
	fi	
	cp $(BOOTROM_DIR)/tcboot.bin $(APP_PRIVATE_DIR)/tclinux_builder
	cp $(BOOTROM_DIR)/byteswap $(APP_PRIVATE_DIR)/tclinux_builder
	cp $(BOOTROM_DIR)/tcboot.bin $(PROJECT_DIR)/images
	cp $(BOOTROM_DIR)/byteswap $(PROJECT_DIR)/images
	
bootbase_clean:
	echo "Clean bootrom"
	$(MAKE) -C $(BOOTROM_DIR) clean

autokernel:
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_AUTO)),)
#No support Purebridge Mode
#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#	cp $(KERNEL_DIR)/tc3162_pb_config $(PROJECT_AUTOCONFIG_DIR)/kernel.config	
#else
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_kernel_config
#	cp $(PROJECT_AUTOCONFIG_DIR)/kernel.config $(KERNEL_DIR)/.config
#endif
endif

kernel: 
	echo "build kernel"
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_AUTO)),)

#No support Purebridge Mode
#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config
#	cp $(KERNEL_DIR)/tc3162_pb_config $(PROJECT_AUTOCONFIG_DIR)/kernel.config
#else
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_kernel_config
	rm -f $(KERNEL_DIR)/.config
	rm -f $(KERNEL_DIR)/.config.old
	cp $(PROJECT_AUTOCONFIG_DIR)/kernel.config $(KERNEL_DIR)/.config
#endif
	
else

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162)),)
	cp $(KERNEL_DIR)/tc3162_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_PB)),)
	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_VOIP)),)
	cp $(KERNEL_DIR)/tc3162_voip_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_IPv6)),)
	cp $(KERNEL_DIR)/tc3162_ipv6_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U)),)
ifneq ($(strip $(TCSUPPORT_DMS)),)
	cp $(KERNEL_DIR)/tc3162u_dms_config $(KERNEL_DIR)/.config;
else
	cp $(KERNEL_DIR)/tc3162u_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_config $(KERNEL_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(KERNEL_DIR)/tc3162u_ipv6_ct_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6_E8B)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_e8b_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3262)),)
	cp $(KERNEL_DIR)/tc3262_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3182)),)
	cp $(KERNEL_DIR)/tc3182_config $(KERNEL_DIR)/.config;
#if use new qos mechanism, config kernel
#ifneq ($(strip $(TCSUPPORT_QOS)),)
#	cp $(KERNEL_DIR)/tc3182_new_qos_config $(KERNEL_DIR)/.config
#endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(KERNEL_DIR)/tc3182_ct_config $(KERNEL_DIR)/.config
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63165)),)
	cp $(KERNEL_DIR)/rt63165_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63365)),)
	cp $(KERNEL_DIR)/rt63365_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63368)),)
	cp $(KERNEL_DIR)/rt63365_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT65168)),)
	cp $(KERNEL_DIR)/rt65168_config $(KERNEL_DIR)/.config;
endif

endif

	#copy if user make menuconfig
	if test -e $(PROFILE_DIR)/kernel.config; \
	then cp $(PROFILE_DIR)/kernel.config $(KERNEL_DIR)/.config; \
	fi

	cp $(APP_PRIVATE_DIR)/etc_script/add_kernel_config.sh $(KERNEL_DIR)/
	chmod 777 $(KERNEL_DIR)/add_kernel_config.sh
	cd $(KERNEL_DIR) && ./add_kernel_config.sh $(KERNEL_DIR)/.config $(KERNEL_DIR)/.config_add
	if test -e $(KERNEL_DIR)/.config_add; \
	then cp $(KERNEL_DIR)/.config_add $(KERNEL_DIR)/.config; rm $(KERNEL_DIR)/.config_add; \
	fi

	#copy mow kernel config as kernel_config to support release BSP
	rm -f $(KERNEL_DIR)/kernel_config
	cp $(KERNEL_DIR)/.config $(KERNEL_DIR)/kernel_config
	
	$(MAKE) -C $(KERNEL_DIR) 
	$(MAKE) -C $(KERNEL_DIR) linux.7z
	$(MAKE) -C $(KERNEL_DIR) modules
	if test -e $(KERNEL_DIR)/linux.7z; \
	then echo "Compile kernel success"; \
	else echo "Compile kernel error!"; exit 1; \
	fi	
	cp $(KERNEL_DIR)/linux.7z $(APP_PRIVATE_DIR)/tclinux_builder
#ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	$(MAKE) -C $(KERNEL_DIR) INSTALL_MOD_PATH=$(FILESYSTEM_DIR) modules_install
#endif
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/scsi/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/usb/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/drivers/net/usb/
	rm -rf $(FILESYSTEM_DIR)/lib/modules/2.6.22.15/kernel/fs/

#ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
#	$(MAKE) -C $(KERNEL_DIR) INSTALL_MOD_PATH=$(FILESYSTEM_DIR) modules_install
#endif

kernel_menuconfig:
	echo "kernel menuconfig"
	echo "build kernel menuconfig"
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_AUTO)),)

#No support Purebridge Mode
#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config
#	cp $(KERNEL_DIR)/tc3162_pb_config $(PROJECT_AUTOCONFIG_DIR)/kernel.config
#else
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_kernel_config
	rm -f $(KERNEL_DIR)/.config
	rm -f $(KERNEL_DIR)/.config.old
	cp $(PROJECT_AUTOCONFIG_DIR)/kernel.config $(KERNEL_DIR)/.config
#endif
	
else

ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162)),)
	cp $(KERNEL_DIR)/tc3162_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_PB)),)
	cp $(KERNEL_DIR)/tc3162_pb_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_VOIP)),)
	cp $(KERNEL_DIR)/tc3162_voip_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162_IPv6)),)
	cp $(KERNEL_DIR)/tc3162_ipv6_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U)),)
ifneq ($(strip $(TCSUPPORT_DMS)),)
	cp $(KERNEL_DIR)/tc3162u_dms_config $(KERNEL_DIR)/.config;
else
	cp $(KERNEL_DIR)/tc3162u_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_config $(KERNEL_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(KERNEL_DIR)/tc3162u_ipv6_ct_config $(KERNEL_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3162U_IPv6_E8B)),)
	cp $(KERNEL_DIR)/tc3162u_ipv6_e8b_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3262)),)
	cp $(KERNEL_DIR)/tc3262_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_TC3182)),)
	cp $(KERNEL_DIR)/tc3182_config $(KERNEL_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(KERNEL_DIR)/tc3182_ct_config $(KERNEL_DIR)/.config;
endif
#if use new qos mechanism, config kernel
#ifneq ($(strip $(TCSUPPORT_QOS)),)
#	cp $(KERNEL_DIR)/tc3182_new_qos_config $(KERNEL_DIR)/.config
#endif
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT63165)),)
	cp $(KERNEL_DIR)/rt63165_config $(KERNEL_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_KERNELCONFIG_RT65168)),)
	cp $(KERNEL_DIR)/rt65168_config $(KERNEL_DIR)/.config;
endif

endif

	#copy if user make menuconfig
	if test -e $(PROFILE_DIR)/kernel.config; \
	then cp $(PROFILE_DIR)/kernel.config $(KERNEL_DIR)/.config; \
	fi
	
	cp $(APP_PRIVATE_DIR)/etc_script/add_kernel_config.sh $(KERNEL_DIR)/
	chmod 777 $(KERNEL_DIR)/add_kernel_config.sh
	cd $(KERNEL_DIR) && ./add_kernel_config.sh $(KERNEL_DIR)/.config $(KERNEL_DIR)/.config_add
	if test -e $(KERNEL_DIR)/.config_add; \
	then cp $(KERNEL_DIR)/.config_add $(KERNEL_DIR)/.config; rm $(KERNEL_DIR)/.config_add; \
	fi

	#copy mow kernel config as kernel_config to support release BSP
	rm -f $(KERNEL_DIR)/kernel_config
	cp $(KERNEL_DIR)/.config $(KERNEL_DIR)/kernel_config

	$(MAKE) -C $(KERNEL_DIR) menuconfig
#	cp $(KERNEL_DIR)/.config  $(PROFILE_DIR)/kernel_template.config
	cp $(KERNEL_DIR)/.config  $(PROFILE_DIR)/kernel.config	

kernel_clean:
	echo "build kernel"
	$(MAKE) -C $(KERNEL_DIR) clean



modules: dmt drivers wlan tcRtp autobench
modules_clean: drivers_clean wlan_clean tcRtp_clean autobench_clean

dmt:
	echo "Delay cp dmt ko when build fs"
	#cp $(RROFILE_DIR)/dmt/* $(FILESYSTEM_DIR)/lib/modules/

pcmdrivertest:
	echo "build pcmdrivertest"
ifneq ($(strip $(TCSUPPORT_VOIP)),)	
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1 PCM_LOOPBACK_TEST=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
	$(MAKE) -C $(MODULES_PCMTEST_DIR) 
	cp $(MODULES_PCMTEST_DIR)/pcmdrivertest.ko $(FILESYSTEM_DIR)/lib/modules/
endif
pcmdrivertest_clean:
	echo "clean pcmdrivertest"
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) clean
	$(MAKE) -C $(MODULES_PCMTEST_DIR) clean

slictest:
	echo "build slictest"
	$(MAKE) -C $(MODULES_PCMSLIC_DIR)
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
	$(MAKE) -C $(MODULES_SLICTEST_DIR) SLIC=ZARLINK_VE890
	cp $(MODULES_SLICTEST_DIR)/le88221test.ko $(FILESYSTEM_DIR)/lib/modules/
	$(MAKE) -C $(MODULES_FLASHTEST_DIR)
	cp $(MODULES_FLASHTEST_DIR)/flash_test $(FILESYSTEM_DIR)/usr/bin/
	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg ./
	tar cvf $(FILESYSTEM_DIR)/romfile.tar romfile.cfg
	rm ./romfile.cfg
	
slictest_clean:
	echo "clean slictest"
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) clean
	$(MAKE) -C $(MODULES_SLICTEST_DIR) clean
	$(MAKE) -C $(MODULES_FLASHTEST_DIR) clean
	rm $(FILESYSTEM_DIR)/lib/modules/pcmdriver_slic.ko
	rm $(FILESYSTEM_DIR)/lib/modules/le88221test.ko
	rm $(FILESYSTEM_DIR)/usr/bin/flash_test
	rm $(FILESYSTEM_DIR)/romfile.tar
	

drivers:
	echo "build mac sar led tcci igmpsnooping drivers"
ifeq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
#	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3162)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2mac.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162l2sar.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcledctrl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/module_sel.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162l2sar.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tcledctrl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/module_sel.ko $(FILESYSTEM_DIR)/lib/modules/

endif
#Build tcci
ifeq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tcci
endif
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tccicmd.ko $(FILESYSTEM_DIR)/lib/modules/
else
	cp $(MODULES_PRIV_SRC_DIR)/tcci/tccicmd.ko $(FILESYSTEM_DIR)/lib/modules/
endif

#build full cone
	echo "build full cone NAT Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcfullcone.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_FULLCONE_DIR)
	cp $(MODULES_FULLCONE_DIR)/tcfullcone.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_IGMP_SNOOPING)),)
#build igmp snooping
	echo "build igmp snooping Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/igmpsnoop.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_IGMPSNOOP_DIR)
	cp $(MODULES_IGMPSNOOP_DIR)/igmpsnoop.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)
#build access limit function
	echo "build access limit Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/accesslimit.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_ACCESSLIMIT_DIR)
	cp $(MODULES_ACCESSLIMIT_DIR)/accesslimit.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif		
ifneq ($(strip $(TCSUPPORT_MLD_SNOOPING)),)
#Build mldsnoop module
	echo "build mld snooping Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/mldsnooping.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/mldsnooping
	cp $(MODULES_PRIV_SRC_DIR)/net/mldsnooping/mldsnooping.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build smux
ifneq ($(strip $(TCSUPPORT_SMUX)),)
	echo "build smux Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcsmux.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_SMUX_DIR)
	cp $(MODULES_SMUX_DIR)/tcsmux.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build fast bridge

ifneq ($(strip $(TCSUPPORT_BRIDGE_FASTPATH)),)
	echo "build fast bridge Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/brg_shortcut.ko $(FILESYSTEM_DIR)/lib/modules/
else	
	$(MAKE) -C $(MODULES_FASTBRIDGE_DIR)
	cp $(MODULES_FASTBRIDGE_DIR)/brg_shortcut.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build portbind
ifneq ($(strip $(TCSUPPORT_PORTBIND)),)
	echo "build portbind Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcportbind.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_PORTBIND_DIR)
	cp $(MODULES_PORTBIND_DIR)/tcportbind.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build vlan_tag
ifneq ($(strip $(TCSUPPORT_VLAN_TAG)),)
	echo "build vlantag Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcvlantag.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_VLAN_TAG_DIR)
	cp $(MODULES_VLAN_TAG_DIR)/tcvlantag.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build hwnat
ifneq ($(strip $(TCSUPPORT_HWNAT)),)
	echo "build hwnat Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/hwnat.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_HWNAT_DIR)
	cp $(MODULES_HWNAT_DIR)/hwnat.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

#build ra-hwnat
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
	echo "build ra-hwnat Modules"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/hw_nat.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_RA_HWNAT_DIR)
	cp $(MODULES_RA_HWNAT_DIR)/hw_nat.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	$(MAKE) -C $(MODULES_RAETH_DIR)
	cp $(MODULES_RAETH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TC3262_DRIVERS)),)
	$(MAKE) -C $(MODULES_TC3262_DIR)
	cp $(MODULES_TC3262_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_VOIP)),)

ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	echo "TC_BUILD_RELEASECODE: Build VoIP drivers!"
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/extern_osal_kernel_gpl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/osal_kernel.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ve_vtsp_hw.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ve_vtsp_rt.ko $(FILESYSTEM_DIR)/lib/modules/	
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/pcmdriver_slic_silab.ko $(FILESYSTEM_DIR)/lib/modules/pcmdriver_slic.ko
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tdi_silab.ko $(FILESYSTEM_DIR)/lib/modules/tdi.ko
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_1S_SILAB
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1 SLIC=SILICON
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/extern_osal_kernel_gpl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/osal_kernel.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ve_vtsp_hw.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ve_vtsp_rt.ko $(FILESYSTEM_DIR)/lib/modules/	
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/pcmdriver_slic_legerity.ko $(FILESYSTEM_DIR)/lib/modules/pcmdriver_slic.ko
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tdi_legerity.ko $(FILESYSTEM_DIR)/lib/modules/tdi.ko
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_2S1O
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/	
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O_SILAB)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/extern_osal_kernel_gpl.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/osal_kernel.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ve_vtsp_hw.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/ve_vtsp_rt.ko $(FILESYSTEM_DIR)/lib/modules/	
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/pcmdriver_slic_silab.ko $(FILESYSTEM_DIR)/lib/modules/pcmdriver_slic.ko
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tdi_silab.ko $(FILESYSTEM_DIR)/lib/modules/tdi.ko
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_2S1O_SILAB
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/		
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1 SLIC=SILICON
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_2S1O)),)	
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tdi_legerity.ko $(FILESYSTEM_DIR)/lib/modules/tdi.ko
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/pcmdriver_slic_legerity.ko $(FILESYSTEM_DIR)/lib/modules/pcmdriver_slic.ko	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_2S1O
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif

ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_1S_89156)),)	
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tdi_legerity.ko $(FILESYSTEM_DIR)/lib/modules/tdi.ko
#	cp $(MODULES_BACKUP)/$(TCPLATFORM)/pcmdriver_slic_legerity.ko $(FILESYSTEM_DIR)/lib/modules/pcmdriver_slic.ko	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_1S_89156
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/
endif
else
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_AC)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=AC_2S1O
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/	
	$(MAKE) -C $(MODULES_VOICEDSP_AC_DRIVER_DIR)
	cp $(MODULES_PRIV_SRC_DIR)/voip/voice_DSP/AC/kernel_soft_dsp/ac49x_dsp/acTC_dsp.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_PRIV_SRC_DIR)/voip/voice_DSP/AC/kernel_soft_dsp/platform/tc_platform/ac_modules.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_PRIV_SRC_DIR)/voip/voice_DSP/AC/kernel_soft_dsp/validation/init.ko $(FILESYSTEM_DIR)/lib/modules/
#	/*20100825 serena_modify*/
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
	#$(MAKE) -C $(MODULES_SLICDRIVER_DIR) ZARLINK=1 CPU=TC3182 
	#cp $(MODULES_PRIV_SRC_DIR)/voip/slic_driver/slic_zarlink.ko $(FILESYSTEM_DIR)/lib/modules/
endif

ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_1S_SILAB
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/

	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_1S_SILAB
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/

	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1 SLIC=SILICON
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_2S1O
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/	

	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/

	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif

ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_2S1O)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_2S1O
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/	

	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_hw.ko  $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/

	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/
	
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif

ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_1S_89156)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_1S_89156
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/	

	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_1S_89156
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_hw.ko  $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/

	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2/module/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/
	
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif

ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O_SILAB)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv TEL_INFC=D2_2S1O_SILAB
	cp $(MODULES_TDI_DIR)/tdi.ko $(FILESYSTEM_DIR)/lib/modules/	

	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O_SILAB
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/extern_osal_kernel_gpl.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/osal_kernel.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_hw.ko  $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_VOICEDSP_D2_DRIVER_DIR)/EDDY1_R_1_5_105_1_final/build.m34k2/ve_vtsp_rt.ko  $(FILESYSTEM_DIR)/lib/modules/

	$(MAKE) -C $(MODULES_PCMSLIC_DIR) TC3182_PCM=1 SLIC=SILICON
	cp $(MODULES_PCMSLIC_DIR)/pcmdriver_slic.ko $(FILESYSTEM_DIR)/lib/modules/	
endif

endif

endif

#ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)

ifneq ($(strip $(TCSUPPORT_USBHOST)),)
	rm -rf $(FILESYSTEM_DIR)/lib/modules/usbhost
	mkdir $(FILESYSTEM_DIR)/lib/modules/usbhost
	cp $(KERNEL_DIR)/drivers/scsi/scsi_mod.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/scsi/scsi_wait_scan.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/scsi/sd_mod.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/scsi/sg.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/scsi/sr_mod.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/core/usbcore.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/host/ehci-hcd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/host/ohci-hcd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/storage/usb-storage.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/mbcache.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/jbd/jbd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/ext2/ext2.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/ext3/ext3.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	if test -e $(KERNEL_DIR)/fs/fat/fat.ko; \
	then cp $(KERNEL_DIR)/fs/fat/fat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
	if test -e $(KERNEL_DIR)/fs/vfat/vfat.ko; \
	then cp $(KERNEL_DIR)/fs/vfat/vfat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
	#cp $(KERNEL_DIR)/fs/fat/fat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/msdos/msdos.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/vfat/vfat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
ifneq ($(strip $(TCSUPPORT_SAMBA)),)
	cp $(KERNEL_DIR)/fs/nls/nls_cp936.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/nls/nls_cp950.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/nls/nls_utf8.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
else
	cp $(KERNEL_DIR)/fs/nls/nls_ascii.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/fs/nls/nls_cp437.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
	if test -e $(KERNEL_DIR)/fs/nls/nls_base.ko; \
	then cp $(KERNEL_DIR)/fs/nls/nls_base.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/; \
	fi
	#cp $(KERNEL_DIR)/fs/nls/nls_base.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	#cp $(KERNEL_DIR)/fs/nls/nls_cp437.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	$(STRIP) --strip-unneeded $(FILESYSTEM_DIR)/lib/modules/usbhost/*.ko
	#rm -f $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
	#cp $(APP_PRIVATE_DIR)/rcS/TC3162U_USBHOST_rcS $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
endif
ifneq ($(strip $(TCSUPPORT_USB_NTFS)),)
	cp $(KERNEL_DIR)/fs/fuse/fuse.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif

ifneq ($(strip $(TCSUPPORT_USB_NTFS_UFSD)),)
ifeq ($(PROFILE),dsl-n12u-c1_dodo)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/usbhost/dsl-n12u-c1/ufsd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
else
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/usbhost/$(PROFILE)/ufsd.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif
endif

ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/serial/usbserial.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/serial/option.ko
	cp $(KERNEL_DIR)/drivers/usb/serial/usbserial.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/serial/option.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/ppp_async.ko $(FILESYSTEM_DIR)/lib/modules/

	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/class/cdc-acm.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/class/cdc-wdm.ko
	cp $(KERNEL_DIR)/drivers/usb/class/cdc-acm.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/usb/class/cdc-wdm.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/usbnet.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/asix.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/cdc_ether.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/rndis_host.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/cdc_ncm.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/qmi_wwan.ko
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/net/usb/cdc_mbim.ko
	cp $(KERNEL_DIR)/drivers/net/usb/usbnet.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/usb/asix.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/usb/cdc_ether.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/usb/rndis_host.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/usb/cdc_ncm.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/usb/qmi_wwan.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(KERNEL_DIR)/drivers/net/usb/cdc_mbim.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif

ifneq ($(strip $(TCSUPPORT_USB_PRINTER_SERVER)),)
	$(STRIP) --strip-unneeded $(KERNEL_DIR)/drivers/usb/class/usblp.ko
	cp $(KERNEL_DIR)/drivers/usb/class/usblp.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif

ifneq ($(strip $(TCSUPPORT_USB_CAMERA)),)
	chmod 777 $(MODULES_USB_CAMERA_DRIVER)/v4l/scripts/*
	$(MAKE) -C $(MODULES_USB_CAMERA_DRIVER) clean
	$(MAKE) -C $(MODULES_USB_CAMERA_DRIVER)
	$(STRIP) --strip-unneeded $(MODULES_USB_CAMERA_DRIVER)/v4l/*.ko
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/usbvideo.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/v4l1-compat.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/uvcvideo.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
	cp $(MODULES_USB_CAMERA_DRIVER)/v4l/videodev.ko $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif



#endif

ifneq ($(strip $(TCSUPPORT_USBDEVICE20)),)
	echo "copy usb device module from linux into filesystem"
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tc3162_udc20.ko $(FILESYSTEM_DIR)/lib/modules
else
	cp $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h/tc3162_udc20.ko $(FILESYSTEM_DIR)/lib/modules
endif
	cp $(KERNEL_DIR)/drivers/usb/gadget/g_ether.ko $(FILESYSTEM_DIR)/lib/modules	
	cp $(KERNEL_DIR)/drivers/usb/gadget/g_file_storage.ko $(FILESYSTEM_DIR)/lib/modules
	#rm $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
	#cp $(APP_PRIVATE_DIR)/rcS/TC3162U_USBDEVICE_rcS $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
endif


ifneq ($(strip $(TCSUPPORT_HW_CRYPTO)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/crypto_k.ko $(FILESYSTEM_DIR)/lib/modules/
else
	$(MAKE) -C $(MODULES_CRYPTO_DRIVER) KERNEL_DIR=$(KERNEL_DIR) ARCH=mips
	cd $(MODULES_CRYPTO_DRIVER) && $(STRIP) --strip-unneeded crypto_k.ko && cp crypto_k.ko $(FILESYSTEM_DIR)/lib/modules/
endif
endif


drivers_clean:
	echo "Clean mac sar led tcci crypto drivers"
ifneq ($(strip $(TCSUPPORT_HW_CRYPTO)),)
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_CRYPTO_DRIVER) clean
endif
	cd $(FILESYSTEM_DIR)/lib/modules/ && rm -f crypto_k.ko
endif

ifeq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)	
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tc3162l2hp2h clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/tcci clean
endif
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	$(MAKE) -C $(MODULES_FULLCONE_DIR) clean
ifneq ($(strip $(TCSUPPORT_IGMP_SNOOPING)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	echo "clean igmpsnoop"
else
	$(MAKE) -C $(MODULES_IGMPSNOOP_DIR) clean
endif
endif
ifneq ($(strip $(TCSUPPORT_MLD_SNOOPING)),)
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/net/mldsnooping clean
endif
ifneq ($(strip $(TCSUPPORT_SMUX)),)
	$(MAKE) -C $(MODULES_SMUX_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_PORTBIND)),)
	$(MAKE) -C $(MODULES_PORTBIND_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	$(MAKE) -C $(MODULES_TC3262_DIR) clean
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) clean
	$(MAKE) -C $(MODULES_SLICDRIVER_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	$(MAKE) -C $(MODULES_TC3262_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_VOIP)),)	
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv clean
#	$(MAKE) -C $(MODULES_SLICDRIVER_DIR) clean
#	/*20100706 serena_modify*/
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_AC)),)	
	$(MAKE) -C $(MODULES_VOICEDSP_AC_DRIVER_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)
	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) clean 
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)
	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O clean 
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O_SILAB)),)
	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O_SILAB clean 
endif
endif

else

ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	$(MAKE) -C $(MODULES_TC3262_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_VOIP)),)	
	$(MAKE) -C $(MODULES_PCMSLIC_DIR) clean
	$(MAKE) -C $(MODULES_PRIV_SRC_DIR)/voip/telephony_drv clean
#ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)	
#	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O clean 
#endif
#ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)
#	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) clean 
#endif
#ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_AC)),)
#	$(MAKE) -C $(MODULES_VOICEDSP_AC_DRIVER_DIR) clean 
#endif
#ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O_SILAB)),)
#	$(MAKE) -C $(MODULES_VOICEDSP_D2_DRIVER_DIR) TEL_INFC=D2_2S1O_SILAB clean 
#endif
endif
endif

ifneq ($(strip $(TCSUPPORT_WLAN)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
wlan:
ifneq ($(strip $(TCSUPPORT_WLAN_RT2561)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt5390ap.ko
   	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt61ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT61AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2561.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2561S.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2661.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt5390ap.ko
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/rt3090ao.ko
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt5390ap.ko
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/rt3593ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860APCard.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP0.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT2860AP1.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/BGN/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/AN/
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3092E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3390E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5592_PCIe_2T2R_V1_5.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5592E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
#	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5392E2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5390RE2P.bin
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5390HE2P.bin	
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin	
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/ated $(FILESYSTEM_DIR)/userfs/bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
	cp $(MODULES_PRIV_SRC_DIR)/wifi/$(TCPLATFORM)/wscd $(FILESYSTEM_DIR)/usr/bin
endif
endif

wlan_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build WLAN, do nothing!"
else
wlan:
	echo "Build WLAN!"
ifneq ($(strip $(TCSUPPORT_WLAN_RT3092)),)
	$(MAKE) -C $(RT3092AP_DIR)
	if test -e $(RT3092AP_DIR)/os/linux/rt5390ap.ko; \
	# if test -e $(RT3092AP_DIR)/os/linux/rt3390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT3092AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	# cp $(RT3092AP_DIR)/os/linux/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3092AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	# cp $(RT3092AP_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	cp $(RT3092AP_DIR)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(RT5392AP_DIR)/ATED
###	$(MAKE) -C $(RT3092AP_DIR)/ATED clean
	$(MAKE) -C $(RT3092AP_DIR)/ATED
	if test -e $(RT3092AP_DIR)/ATED/ated;  \
	then echo "Compile RT5392 ATED success";   \
	else echo "Compile RT5392 ATED error!"; exit 1;  \
	fi
	cp $(RT3092AP_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(RT3092AP_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(RT3092AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(RT3092AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(RT3092AP_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(RT3092AP_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(RT3092AP_DIR)/WSC_UPNP clean
	$(MAKE) -C $(RT3092AP_DIR)/WSC_UPNP
	if test -e $(RT3092AP_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT5392 wscd success";   \
	else echo "Compile RT5392 wscd error!"; exit 1;  \
	fi
	cp $(RT3092AP_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(RT3092AP_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(RT3092AP_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif
#tmp for RT6856, Sam
ifneq ($(strip $(TCSUPPORT_WLAN_RT6856)),)
	$(MAKE) -C $(RT6856_DIR)
	if test -e $(RT6856_DIR)/rt6856_iNIC.ko; \
	then echo "Compile RT6856 Driver success"; \
	else echo "Compile RT6856 Driver error!"; exit 1; \
	fi
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/iNIC.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/iNIC_ap.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/iNIC_ap.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/iNIC_ap1.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/iNIC_e2p.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/iNIC_e2p1.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/
	cp $(RT6856_DIR)/rt6856_iNIC.ko $(FILESYSTEM_DIR)/usr/etc/Wireless/RT6856/

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$(MODULES_PRIV_SRC_DIR)/wifi/module-v2.5.3.4/misc/daemon/WSC2_UPNP"
#cd $WSCD_DIR
	rm -f $(WSCD_DIR)/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-uclibc)
	cd $(WSCD_DIR)/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1"
else
	cd $(WSCD_DIR)/libupnp-1.3.1 && ./configure --host=mips-linux-uclibc CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
##	$(MAKE) -C $(WSCD_DIR)/libupnp-1.3.1 clean
	$(MAKE) -C $(WSCD_DIR)/libupnp-1.3.1
##	$(MAKE) -C $(WSCD_DIR) clean
	$(MAKE) -C $(WSCD_DIR)
	if test -e $(WSCD_DIR)/wscd;  \
	then echo "Compile wscd success";   \
	else echo "Compile wscd error!"; exit 1;  \
	fi
	cp $(WSCD_DIR)/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(WSCD_DIR)/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(WSCD_DIR)/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/
endif
endif

ifneq ($(strip $(TCSUPPORT_WLAN_RT2561)),)
#	$(MAKE) -C $(RT2561AP_DIR) clean
	$(MAKE) -C $(RT2561AP_DIR)
	if test -e $(RT2561AP_DIR)/rt61ap.ko; \
	then echo "Compile RT2561 Driver success"; \
	else echo "Compile RT2561 Driver error!"; exit 1; \
	fi
	cp $(RT2561AP_DIR)/rt61ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT61AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT2561.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT2561S.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	cp $(RT2561AP_DIR)/RT2661.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP/
	
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
#	$(MAKE) -C $(RT3390AP_DIR) clean
	$(MAKE) -C $(RT3390AP_DIR)
	if test -e $(RT3390AP_DIR)/os/linux/rt3390ap.ko; \
	then echo "Compile RT3390 Driver success"; \
	else echo "Compile RT3390 Driver error!"; exit 1; \
	fi
	cp $(RT3390AP_DIR)/os/linux/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(RT3390AP_DIR)/ATED
###	$(MAKE) -C $(RT3390AP_DIR)/ATED clean
	$(MAKE) -C $(RT3390AP_DIR)/ATED
	if test -e $(RT3390AP_DIR)/ATED/ated;  \
	then echo "Compile RT3390 ATED success";   \
	else echo "Compile RT3390 ATED error!"; exit 1;  \
	fi
	cp $(RT3390AP_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
	cd $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="$(CFG_CFLAGS)"

	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP clean
	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP
	if test -e $(RT3390AP_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT3390 wscd success";   \
	else echo "Compile RT3390 wscd error!"; exit 1;  \
	fi
	cp $(RT3390AP_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(RT3390AP_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(RT3390AP_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif

ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
#	$(MAKE) -C $(RT3390AP_DIR) clean
	$(MAKE) -C $(RT3390AP_DIR)
	if test -e $(RT3390AP_DIR)/os/linux/rt3390ap.ko; \
	then echo "Compile RT3390 Driver success"; \
	else echo "Compile RT3390 Driver error!"; exit 1; \
	fi
	cp $(RT3390AP_DIR)/os/linux/rt3390ap.ko $(FILESYSTEM_DIR)/lib/modules/rt3090ap.ko
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT3390AP_DIR)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(RT3390AP_DIR)/ATED
###	$(MAKE) -C $(RT3390AP_DIR)/ATED clean
	$(MAKE) -C $(RT3390AP_DIR)/ATED
	if test -e $(RT3390AP_DIR)/ATED/ated;  \
	then echo "Compile RT3390 ATED success";   \
	else echo "Compile RT3390 ATED error!"; exit 1;  \
	fi
	cp $(RT3390AP_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP clean
	$(MAKE) -C $(RT3390AP_DIR)/WSC_UPNP
	if test -e $(RT3390AP_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT3390 wscd success";   \
	else echo "Compile RT3390 wscd error!"; exit 1;  \
	fi
	cp $(RT3390AP_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(RT3390AP_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(RT3390AP_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
#	$(MAKE) -C $(RT5392AP_DIR) clean
	$(MAKE) -C $(RT5392AP_DIR)
	if test -e $(RT5392AP_DIR)/os/linux/rt5390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT5392AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(RT5392AP_DIR)/ATED
###	$(MAKE) -C $(RT5392AP_DIR)/ATED clean
	$(MAKE) -C $(RT5392AP_DIR)/ATED
	if test -e $(RT5392AP_DIR)/ATED/ated;  \
	then echo "Compile RT5392 ATED success";   \
	else echo "Compile RT5392 ATED error!"; exit 1;  \
	fi
	cp $(RT5392AP_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP clean
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP
	if test -e $(RT5392AP_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT5392 wscd success";   \
	else echo "Compile RT5392 wscd error!"; exit 1;  \
	fi
	cp $(RT5392AP_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(RT5392AP_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(RT5392AP_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_RT5592)),)
	$(MAKE) -C $(RT5592AP_DIR)
	if test -e $(RT5592AP_DIR)/os/linux/rt5592ap.ko; \
	then echo "Compile RT5592 Driver success"; \
	else echo "Compile RT5592 Driver error!"; exit 1; \
	fi
	cp $(RT5592AP_DIR)/os/linux/rt5592ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT5592AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT5592AP_DIR)/RT5592_PCIe_2T2R_V1_5.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/RT30xxEEPROM.bin
else
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt5592ap.ko
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
endif
#RT3593AP_DIR
ifneq ($(strip $(TCSUPPORT_DUAL_WLAN_RT3593)),)
	$(MAKE) -C $(RT3593AP_DIR)
	if test -e $(RT3593AP_DIR)/os/linux/rt3593ap.ko; \
	then echo "Compile RT3593 Driver success"; \
	else echo "Compile RT3593 Driver error!"; exit 1; \
	fi
	cp $(RT3593AP_DIR)/os/linux/rt3593ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT3593AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/
	cp $(RT3593AP_DIR)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860/RT30xxEEPROM.bin
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)
	if test -e $(WIFI_MULTI_DRIVER_DIR)/os/linux/rt3593ap.ko; \
	then echo "Compile RT5592RT3593 Driver success"; \
	else echo "Compile RT5592RT3593 Driver error!"; exit 1; \
	fi
	cp $(WIFI_MULTI_DRIVER_DIR)/os/linux/rt3593ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860APCard.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
#	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860AP0.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(WIFI_MULTI_DRIVER_DIR)/RT2860AP1.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/BGN/
#	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/AN/
	cp $(WIFI_MULTI_DRIVER_DIR)/RT3092_PCIe_LNA_2T2R_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3092E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT3390_PCIe_1T1R_LNA_ALC_ADT_V1_2.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3390E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin	
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5592_PCIe_2T2R_V1_5.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5592E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
#	cp $(WIFI_MULTI_DRIVER_DIR)/RT3593_PCIe_3T3R_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT3593E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5392_PCIe_2T2R_ALC_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5392E2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5390RE2P.bin
	cp $(WIFI_MULTI_DRIVER_DIR)/RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/E2P/RT5390HE2P.bin	

#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(WIFI_MULTI_DRIVER_DIR)/ATED
###	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)/ATED clean
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)/ATED
	if test -e $(WIFI_MULTI_DRIVER_DIR)/ATED/ated;  \
	then echo "Compile RT5392_5592 ATED success";   \
	else echo "Compile RT5392_5592 ATED error!"; exit 1;  \
	fi
	cp $(WIFI_MULTI_DRIVER_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif
#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP clean
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP
	if test -e $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT5392_5592 wscd success";   \
	else echo "Compile RT5392_5592 wscd error!"; exit 1;  \
	fi
	cp $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(WIFI_MULTI_DRIVER_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif	
	

ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
#	$(MAKE) -C $(RT5392AP_DIR) clean
	$(MAKE) -C $(RT5392AP_DIR)
	if test -e $(RT5392AP_DIR)/os/linux/rt5390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT5392AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT5390_PCIe_1T1R_MAIN_ANT_V1_3.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
endif
#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(RT5392AP_DIR)/ATED
###	$(MAKE) -C $(RT5392AP_DIR)/ATED clean
	$(MAKE) -C $(RT5392AP_DIR)/ATED
	if test -e $(RT5392AP_DIR)/ATED/ated;  \
	then echo "Compile RT5392 ATED success";   \
	else echo "Compile RT5392 ATED error!"; exit 1;  \
	fi
	cp $(RT5392AP_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP clean
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP
	if test -e $(RT5392AP_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT5392 wscd success";   \
	else echo "Compile RT5392 wscd error!"; exit 1;  \
	fi
	cp $(RT5392AP_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(RT5392AP_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(RT5392AP_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
#	$(MAKE) -C $(RT5392AP_DIR) clean
	$(MAKE) -C $(RT5392AP_DIR)
	if test -e $(RT5392AP_DIR)/os/linux/rt5390ap.ko; \
	then echo "Compile RT5392 Driver success"; \
	else echo "Compile RT5392 Driver error!"; exit 1; \
	fi
	cp $(RT5392AP_DIR)/os/linux/rt5390ap.ko $(FILESYSTEM_DIR)/lib/modules/
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	mkdir $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT2860AP.dat $(FILESYSTEM_DIR)/usr/etc/Wireless/RT2860AP/
	cp $(RT5392AP_DIR)/RT5390H_PCIe_1T1R_MAIN_ANT_V1_4.bin $(FILESYSTEM_DIR)/usr/etc/RT30xxEEPROM.bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/Wireless/RT61AP
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt61ap.ko
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/lib/modules/rt3390ap.ko
endif
#Build the ATED for QA tool
ifneq ($(strip $(TCSUPPORT_WLAN_QATOOL)),)
#	ATED_DIR=$(RT5392AP_DIR)/ATED
###	$(MAKE) -C $(RT5392AP_DIR)/ATED clean
	$(MAKE) -C $(RT5392AP_DIR)/ATED
	if test -e $(RT5392AP_DIR)/ATED/ated;  \
	then echo "Compile RT5392 ATED success";   \
	else echo "Compile RT5392 ATED error!"; exit 1;  \
	fi
	cp $(RT5392AP_DIR)/ATED/ated $(FILESYSTEM_DIR)/userfs/bin
endif

#Build the wscd & copy xml
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)
#WSCD_DIR="$TOP_DIR/modules/wifi/2009_1106_RT3390_LinuxAP_V2.3.2.0_DPA/WSC_UPNP"
#cd $WSCD_DIR
	rm -f $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1/Makefile
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1" 
else
	cd $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 && ./configure --host=mips-linux-gnu CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1 clean
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP/libupnp-1.3.1
###	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP clean
	$(MAKE) -C $(RT5392AP_DIR)/WSC_UPNP
	if test -e $(RT5392AP_DIR)/WSC_UPNP/wscd;  \
	then echo "Compile RT5392 wscd success";   \
	else echo "Compile RT5392 wscd error!"; exit 1;  \
	fi
	cp $(RT5392AP_DIR)/WSC_UPNP/wscd $(FILESYSTEM_DIR)/usr/bin
	rm -rf $(FILESYSTEM_DIR)/usr/etc/xml
	mkdir $(FILESYSTEM_DIR)/usr/etc/xml
	cp $(RT5392AP_DIR)/WSC_UPNP/xml/WFADeviceDesc.xml $(FILESYSTEM_DIR)/usr/etc/xml/
	cp $(RT5392AP_DIR)/WSC_UPNP/xml/WFAWLANConfigSCPD.xml $(FILESYSTEM_DIR)/usr/etc/xml/	
endif
endif


wlan_clean:
	echo "Clean WLAN!"
ifneq ($(strip $(TCSUPPORT_WLAN_RT3092)),)
	$(MAKE) -C $(RT3092AP_DIR) clean
endif	
#tmp for RT6856, Sam
ifneq ($(strip $(TCSUPPORT_WLAN_RT6856)),)
	$(MAKE) -C $(RT6856_DIR) clean
	-@$(MAKE) -C $(WSCD_DIR)/libupnp-1.3.1 clean
	$(MAKE) -C $(WSCD_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT2561)),)
	$(MAKE) -C $(RT2561AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
	$(MAKE) -C $(RT3390AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
	$(MAKE) -C $(RT3390AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
	$(MAKE) -C $(RT5392AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
	$(MAKE) -C $(RT5392AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
	$(MAKE) -C $(RT5392AP_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_WLAN_MULTIDRIVER)),)
	$(MAKE) -C $(WIFI_MULTI_DRIVER_DIR) clean
endif
endif
else
wlan:
	echo "No Build WLAN!"
wlan_clean:
	echo "No Build WLAN!"
endif


#build autobench
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
autobench:
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/auto_bench.ko $(FILESYSTEM_DIR)/lib/modules/
autobench_clean:
	echo "TC_BUILD_RELEASECODE: Build AUTOBEHCH Driver, do nothing!"
else
autobench:
ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)
	$(MAKE) -C $(MODULES_AUTOBENCH_DIR) SLIC=SILAB_32176
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)
	$(MAKE) -C $(MODULES_AUTOBENCH_DIR) SLIC=ZARLINK_VE890
endif
else
	$(MAKE) -C $(MODULES_AUTOBENCH_DIR)
endif

	cp $(MODULES_AUTOBENCH_DIR)/*.ko $(FILESYSTEM_DIR)/lib/modules/
	cp $(MODULES_AUTOBENCH_DIR)/rcS_AutoBench $(FILESYSTEM_DIR)/usr/etc/init.d/
autobench_clean:
	$(MAKE) -C $(MODULES_AUTOBENCH_DIR) clean
endif
else
autobench:
	if test -e $(FILESYSTEM_DIR)/usr/etc/init.d/rcS_AutoBench; \
	then rm -f $(FILESYSTEM_DIR)/usr/etc/init.d/rcS_AutoBench; \
	fi
autobench_clean:
endif


#build tcRtp
ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
tcRtp:
	cp $(MODULES_BACKUP)/$(TCPLATFORM)/tcrtp.ko $(FILESYSTEM_DIR)/lib/modules/
tcRtp_clean:
	echo "TC_BUILD_RELEASECODE: Build tcRtp Driver, do nothing!"
else
tcRtp:
	$(MAKE) -C $(MODULES_RTP_DIR)
	cp $(MODULES_RTP_DIR)/tcrtp.ko $(FILESYSTEM_DIR)/lib/modules/
tcRtp_clean:
	$(MAKE) -C $(MODULES_RTP_DIR) clean
endif
else
tcRtp:
tcRtp_clean:
endif


#No support Purebridge Mode
#ifeq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
apps: libatm br2684ctl brctl libtcapi mxml tcapi busybox shared cfg_manager ssl cwmp cpu wirelesstool libdisk\
	iptables tc ebtables mtd pppd tcci tcwdog utelnetd boa dhcrelay ez-ipupdate \
	openssl email\
	snmpd ntpclient tftpd wpas igmpproxy voip_api mtf pppoe-relay zebra radvd iproute ethcmd rtkethcmd pwctlcmd 8021X \
	vconfig cmd_ci dhcpv6 dnsmasq smuxctl ecmh usb_3g_dongle usb_printer usb_camera ntfs automount autoip backuprestore pppoe_svr \
	dms ssh ip skbmgr ra_menu siproxd restore_linos_info samba traceroute hw_nat sysstat iconv vsftpd hotplug2 udev rc rstats auto_det \
	libusb10 libusb libusb-0.1.12 u2ec lprng \
	webdav cloudsync accel_pptpd spectrum \
	infosvr monitorcfgmgr vpn_tools udpxy accel_pptp rp_l2tp \
	sdparm-1.02 usbmodeswitch comgt-0.32 uqmi

apps_clean: libatm_clean br2684ctl_clean brctl_clean libtcapi_clean busybox_clean cfg_manager_clean ssl_clean cwmp_clean \
	wirelesstool_clean cpu_clean iptables_clean tc_clean ebtables_clean mtd_clean pppd_clean tcci_clean tcwdog_clean \
	utelnetd_clean mxml_clean boa_clean tcapi_clean rstats_clean auto_det_clean dhcrelay_clean ez-ipupdate_clean openssl_clean email_clean snmpd_clean \
	ntpclient_clean tftpd_clean wpas_clean igmpproxy_clean mtf_clean pppoe-relay_clean zebra_clean radvd_clean iproute_clean \
	ethcmd_clean rtkethcmd_clean pwctlcmd_clean 8021X_clean vconfig_clean cmd_ci_clean dhcpv6_clean dnsmasq_clean smuxctl_clean ecmh_clean usb_3g_dongle_clean \
	usb_printer_clean usb_camera_clean ntfs_clean automount_clean autoip_clean dms_clean ssh_clean ip_clean skbmgr_clean ra_menu_clean siproxd_clean restore_linos_info_clean samba_clean \
	backuprestore_clean pppoe_svr_clean traceroute_clean hw_nat_clean sysstat_clean libdisk_clean shared_clean iconv_clean vsftpd_clean hotplug2_clean udev_clean rc_clean \
	libusb10_clean libusb_clean libusb-0.1.12_clean u2ec_clean lprng_clean \
	webdav_clean cloudsync_clean infosvr_clean monitorcfgmgr_clean accel_pptpd_clean spectrum_clean vpn_tools_clean \
	udpxy_clean accel_pptp_clean rp_l2tp_clean \
	sdparm-1.02_clean usbmodeswitch_clean comgt-0.32_clean uqmi_clean
#endif

ifneq ($(strip $(ASUS_WEBDAV)),)
webdav: sqlite libxml2 curl pcre samba_webdav lighttpd
webdav_clean: sqlite_clean libxml2_clean pcre_clean samba_webdav_clean lighttpd_clean
else
webdav:
webdav_clean:
endif

ifneq ($(strip $(ASUS_CLOUDSYNC)),)
cloudsync: libxml2 curl asuswebstorage inotify zlib neon webdav_client
cloudsync_clean: libxml2_clean curl_clean asuswebstorage_clean inotify_clean zlib_clean neon_clean webdav_client_clean
else
cloudsync:
cloudsync_clean:
endif

ifneq ($(strip $(ASUS_ACCEL_PPTPD)),)
accel_pptpd: pppd
	$(MAKE) -C $(APP_ACCEL_PPTPD) server KDIR=$(KERNEL_DIR)
	cp $(APP_ACCEL_PPTPD)/pppd_plugin/src/.libs/pptp.so $(FILESYSTEM_DIR)/lib/pptp.so
	$(STRIP) $(FILESYSTEM_DIR)/lib/pptp.so
	cp $(APP_ACCEL_PPTPD)/pptpd-1.3.3/pptpd $(FILESYSTEM_DIR)/usr/sbin/pptpd
	cp $(APP_ACCEL_PPTPD)/pptpd-1.3.3/bcrelay $(FILESYSTEM_DIR)/usr/sbin/bcrelay
	cp $(APP_ACCEL_PPTPD)/pptpd-1.3.3/pptpctrl $(FILESYSTEM_DIR)/usr/sbin/pptpctrl
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/pptpd
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/bcrelay
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/pptpctrl
	ln -sf /usr/bin/pppd $(FILESYSTEM_DIR)/usr/sbin/pppd
accel_pptpd_clean:
	$(MAKE) -C $(APP_ACCEL_PPTPD) clean
	rm -f $(FILESYSTEM_DIR)/lib/pptp.so
	rm -f $(FILESYSTEM_DIR)/usr/sbin/pptpd
	rm -f $(FILESYSTEM_DIR)/usr/sbin/bcrelay
	rm -f $(FILESYSTEM_DIR)/usr/sbin/pptpctrl
	rm -f $(FILESYSTEM_DIR)/usr/sbin/pppd
else
accel_pptpd:
accel_pptpd_clean:
endif

ifneq ($(strip $(ASUS_SPECTRUM)),)
spectrum:
	echo "Build spectrum"
	$(MAKE) -C $(APP_SPECTRUM_DIR)
	if test -e $(APP_SPECTRUM_DIR)/spectrum; \
	then echo "Compile spectrum success"; \
	else echo "Compile spectrum error!"; exit 1; \
	fi
	cp $(APP_SPECTRUM_DIR)/spectrum  $(FILESYSTEM_DIR)/userfs/bin/

spectrum_clean:
	echo "Clean spectrum"
	$(MAKE) -C $(APP_SPECTRUM_DIR) clean
else
spectrum:
	echo "[build spectrum]spectrum feature is not enabled"

spectrum_clean:
	echo "[spectrum_clean]spectrum feature is not enabled"
endif

#ifneq ($(strip $(TCSUPPORT_PUREBRIDGE)),)
#apps: libatm br2684ctl brctl libtcapi busybox cfg_manager wirelesstool\
#      mtd tcci tcwdog utelnetd mxml boa tcapi rstats auto_det monitorcfgmgr
#      
#apps_clean: libatm_clean br2684ctl_clean brctl_clean libtcapi_clean busybox_clean cfg_manager_clean  \
#      mtd_clean pppd_clean tcci_clean tcwdog_clean utelnetd_clean mxml_clean boa_clean tcapi_clean rstats_clean auto_det_clean monitorcfgmgr_clean
#endif
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_CT)),)
cfg_manager:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/cfg_manager $(FILESYSTEM_DIR)/userfs/bin
cfg_manager_clean:
	echo "Clean CFG_MANAGER! do nothing."
else
cfg_manager:openssl
	@echo "Build CFG_MANAGER!"
	cp -rf $(APP_CFG_MANAGER_DIR)/$(TCPLATFORM)/cfg_manager.o $(APP_CFG_MANAGER_DIR)/
	$(MAKE) -C $(APP_CFG_MANAGER_DIR)
	@if test -e $(APP_CFG_MANAGER_DIR)/cfg_manager; \
	then echo "Compile cfg_manager success"; \
	else echo "Compile cfg_manager error!"; exit 1; \
	fi
	cp  $(APP_CFG_MANAGER_DIR)/cfg_manager  $(FILESYSTEM_DIR)/userfs/bin/


cfg_manager_clean:
	echo "Clean CFG_MANAGER!"
	$(MAKE) -C $(APP_CFG_MANAGER_DIR) clean	
endif
else
cfg_manager:openssl
	echo "Build CFG_MANAGER!"
	$(MAKE) -C $(APP_CFG_MANAGER_DIR)
	if test -e $(APP_CFG_MANAGER_DIR)/cfg_manager; \
	then echo "Compile cfg_manager success"; \
	else echo "Compile cfg_manager error!"; exit 1; \
	fi
	cp  $(APP_CFG_MANAGER_DIR)/cfg_manager  $(FILESYSTEM_DIR)/userfs/bin/

cfg_manager_clean:
	echo "Clean CFG_MANAGER!"
	$(MAKE) -C $(APP_CFG_MANAGER_DIR) clean	

endif

ifneq ($(strip $(TCSUPPORT_CT)),)
skbmgr:
skbmgr_clean:
else
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
skbmgr:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/skbmgr $(FILESYSTEM_DIR)/userfs/bin/
skbmgr_clean:
else
skbmgr:
	echo "Build SKBMGR!"
	$(MAKE) -C $(APP_SKB_MANAGER_DIR)
	if test -e $(APP_SKB_MANAGER_DIR)/skbmgr; \
	then echo "Compile skbmgr success"; \
	else echo "Compile skbmgr error!"; exit 1; \
	fi
	cp  $(APP_SKB_MANAGER_DIR)/skbmgr  $(FILESYSTEM_DIR)/userfs/bin/


skbmgr_clean:
	echo "Clean SKB_MANAGER!"
	$(MAKE) -C $(APP_SKB_MANAGER_DIR) clean	
endif
endif


ifneq ($(strip $(TCSUPPORT_CWMP_SSL)),)
ssl:
	echo "Build Matrix-ssl!"
	$(MAKE) -C $(APP_SSL_DIR)
	if test -e $(APP_SSL_DIR)/libmatrixssl.so; \
	then echo "Compile Matrix-ssl success"; \
	else echo "Compile Matrix-ssl error!"; exit 1; \
	fi
	cp $(APP_SSL_DIR)/libmatrixssl.so  $(FILESYSTEM_DIR)/lib/
		
ssl_clean:
	$(MAKE) -C $(APP_SSL_DIR) clean
else
ssl:		
ssl_clean:
endif

ifneq ($(strip $(TCSUPPORT_CWMP)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
cwmp:
	cp  $(APP_BINARY_DIR)/$(TCPLATFORM)/tr69  $(FILESYSTEM_DIR)/userfs/bin
cwmp_clean:
	echo "TC_BUILD_RELEASECODE: Build CWMP, do nothing!"
else
cwmp:
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp -rf $(APP_CWMP_DIR)/$(TCPLATFORM)/*.o $(APP_CWMP_DIR)/
ifeq ($(TCSUPPORT_WLAN),)
	cp -rf $(APP_CWMP_DIR)/$(TCPLATFORM)/IgdClmp_noWlan.o $(APP_CWMP_DIR)/IgdClmp.o
	cp -rf $(APP_CWMP_DIR)/$(TCPLATFORM)/IgdStubsClmp_noWlan.o $(APP_CWMP_DIR)/IgdStubsClmp.o
endif
endif
	echo "Build CWMP!"
	$(MAKE) -C $(APP_CWMP_DIR)
	if test -e $(APP_CWMP_DIR)/tr69; \
	then echo "Compile tr69 success"; \
	else echo "Compile tr69 error!"; exit 1; \
	fi
	cp $(APP_CWMP_DIR)/tr69  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_PRIVATE_DIR)/etc_script/devInf.conf $(FILESYSTEM_DIR)/usr/etc/

		
cwmp_clean:
	$(MAKE) -C $(APP_CWMP_DIR) clean
endif
else
cwmp:
	echo "No Build CWMP!, but we will build upnpd"
	$(MAKE) -C $(APP_UPNP_DIR)
	if test -e $(APP_UPNP_DIR)/upnpd; \
	then echo "Compile upnpd success"; \
	else echo "Compile upnpd error!"; exit 1; \
	fi
	cp $(APP_UPNP_DIR)/upnpd  $(FILESYSTEM_DIR)/userfs/bin/
	
cwmp_clean:
	echo "No Clean CWMP! we clean upnpd"
	$(MAKE) -C $(APP_UPNP_DIR) clean	
endif


#Build linux-atm
libatm:
	echo "Build linux-atm library"
	$(MAKE) -C $(APP_LIBATM_DIR)
	if test -e $(APP_LIBATM_DIR)/lib/libatm.a; \
	then echo "Compile LIB ATM success"; \
	else echo "Compile LIB ATM error!"; exit 1; \
	fi
	
libatm_clean:
	echo "Clean linux-atm library"
	$(MAKE) -C $(APP_LIBATM_DIR) clean

#Build br2684ctl
br2684ctl:
	echo "Building br2684ctl"
	$(MAKE) -C $(APP_BR2684CTL_DIR)
	if test -e $(APP_BR2684CTL_DIR)/br2684ctl; \
	then echo "Compile Br2684ctl success"; \
	else echo "Compile Br2684ctl error!"; exit 1; \
	fi
	cp  $(APP_BR2684CTL_DIR)/br2684ctl  $(FILESYSTEM_DIR)/usr/bin/

br2684ctl_clean:
	echo "Clean br2684ctl"
	$(MAKE) -C $(APP_BR2684CTL_DIR) clean

#Build smuxctl
ifneq ($(strip $(TCSUPPORT_SMUX)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
smuxctl:
	cp  $(APP_BINARY_DIR)/$(TCPLATFORM)/smuxctl  $(FILESYSTEM_DIR)/usr/bin
smuxctl_clean:
	echo "TC_BUILD_RELEASECODE: Build SMUXCTL, do nothing!"
else
smuxctl:
	echo "Building smuxctl"
	$(MAKE) -C $(APP_SMUXCTL_DIR)
	if test -e $(APP_SMUXCTL_DIR)/smuxctl; \
	then echo "Compile smuxctl success"; \
	else echo "Compile smuxctl error!"; exit 1; \
	fi
	cp  $(APP_SMUXCTL_DIR)/smuxctl  $(FILESYSTEM_DIR)/usr/bin/

smuxctl_clean:
	echo "Clean smuxctl"
	$(MAKE) -C $(APP_SMUXCTL_DIR) clean
endif
else
smuxctl:		
smuxctl_clean:
endif

#Build bridge-utils-1.0.6
brctl:
	echo "Build bridge-utils-1.0.6"
	$(MAKE) -C $(APP_BRCTL_DIR)
	if test -e $(APP_BRCTL_DIR)/brctl/brctl; \
	then echo "Compile Brctl success"; \
	else echo "Compile Brctl error!"; exit 1; \
	fi
	cp  $(APP_BRCTL_DIR)/brctl/brctl  $(FILESYSTEM_DIR)/usr/bin/

brctl_clean:
	echo "Clean bridge-utils-1.0.6"
	$(MAKE) -C $(APP_BRCTL_DIR) clean

#Build tcapi library
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
libtcapi:
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/* $(APP_TCAPILIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/$(TCPLATFORM)/libtcapi.so.* $(PUBLIC_LIB_DIR)/
libtcapi_clean:
	echo "TC_BUILD_RELEASECODE: Building tcapi library, do nothing!"
else
libtcapi:
	echo "Building tcapi library"
	$(MAKE) -C $(APP_TCAPILIB_DIR)
	if test -e $(APP_TCAPILIB_DIR)/libtcapi.so.1.4; \
	then echo "Compile TCAPI Lib success"; \
	else echo "Compile TCAPI Lib error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_TCAPILIB_DIR) install
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so.*  $(FILESYSTEM_DIR)/lib/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so.* $(LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so $(PUBLIC_LIB_DIR)/
	cp  $(APP_TCAPILIB_DIR)/libtcapi.so.* $(PUBLIC_LIB_DIR)/


libtcapi_clean:
	echo "Clean tcapi library"
	$(MAKE) -C $(APP_TCAPILIB_DIR) clean
endif

#Build busybox-1.00
busybox:
	echo "Building Busybox-1.00"
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_AUTO)),)
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_busybox_config
	cp $(PROJECT_AUTOCONFIG_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config
else

ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162)),)
	cp $(APP_BUSYBOX_DIR)/3162_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_PB)),)
	cp $(APP_BUSYBOX_DIR)/3162_pb_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162_ipv6_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U)),)
	cp $(APP_BUSYBOX_DIR)/3162u_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_config $(APP_BUSYBOX_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_ct_config $(APP_BUSYBOX_DIR)/.config;
endif
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6_E8B)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_e8b_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3262)),)
	cp $(APP_BUSYBOX_DIR)/3262_config $(APP_BUSYBOX_DIR)/.config;
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BUSYBOX_DIR)/3262_ct_config $(APP_BUSYBOX_DIR)/.config;
endif
endif

endif

	#copy if user make menuconfig
	if test -e $(PROFILE_DIR)/busybox.config; \
	then cp $(PROFILE_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config; \
	fi

	#copy mow kernel config as busybox_config to support release BSP
	rm -f $(APP_BUSYBOX_DIR)/busybox_config
	cp $(APP_BUSYBOX_DIR)/.config $(APP_BUSYBOX_DIR)/busybox_config
	
	#$(MAKE) -C $(APP_BUSYBOX_DIR) clean
	$(MAKE) -C $(APP_BUSYBOX_DIR)
	if test -e $(APP_BUSYBOX_DIR)/busybox; \
	then echo "Compile BusyBox success"; \
	else echo "Compile BusyBox error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_BUSYBOX_DIR) install
	
ifneq ($(TCSUPPORT_TRACEROUTE),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/traceroute
	ln -fs ../../bin/busybox $(FILESYSTEM_DIR)/usr/bin/traceroute
endif

busybox_menuconfig:
	echo "busybox menuconfig"
	echo "Building Busybox menuconfig"
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_AUTO)),)
	cd $(PROJECT_AUTOCONFIG_DIR) && ./create_busybox_config
	cp $(PROJECT_AUTOCONFIG_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config
else

ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162)),)
	cp $(APP_BUSYBOX_DIR)/3162_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_PB)),)
	cp $(APP_BUSYBOX_DIR)/3162_pb_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162_ipv6_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U)),)
	cp $(APP_BUSYBOX_DIR)/3162u_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3162U_IPv6_E8B)),)
	cp $(APP_BUSYBOX_DIR)/3162u_ipv6_e8b_config $(APP_BUSYBOX_DIR)/.config;
endif
ifneq ($(strip $(TCSUPPORT_BUSYBOXCONFIG_TC3262)),)
	cp $(APP_BUSYBOX_DIR)/3262_config $(APP_BUSYBOX_DIR)/.config;
endif

endif

	#copy if user make menuconfig
	if test -e $(PROFILE_DIR)/busybox.config; \
	then cp $(PROFILE_DIR)/busybox.config $(APP_BUSYBOX_DIR)/.config; \
	fi

	#copy mow kernel config as busybox_config to support release BSP
	rm -f $(APP_BUSYBOX_DIR)/busybox_config
	cp $(APP_BUSYBOX_DIR)/.config $(APP_BUSYBOX_DIR)/busybox_config

	$(MAKE) -C $(APP_BUSYBOX_DIR) menuconfig
#	cp $(APP_BUSYBOX_DIR)/.config  $(PROFILE_DIR)/busybox_template.config
	cp $(APP_BUSYBOX_DIR)/.config  $(PROFILE_DIR)/busybox.config
	
busybox_clean:
	echo "Clean Busybox-1.00"
	$(MAKE) -C $(APP_BUSYBOX_DIR) clean
	$(MAKE) -C $(APP_BUSYBOX_DIR) distclean
	
cpu:
	echo "Build cpu"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	export TEMPCC=$(CC)
	export CC="$(CC)$(TC3162_CFLAG)"
endif
#	$(MAKE) -C $(APP_CPU_DIR) clean
	$(MAKE) -C $(APP_CPU_DIR)
	if test -e $(APP_CPU_DIR)/cpu; \
	then echo "Compile cpu success"; \
	else echo "Compile cpu error!"; exit 1; \
	fi
	cp  $(APP_CPU_DIR)/cpu  $(FILESYSTEM_DIR)/usr/bin/
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	CC=$(TEMPCC)
endif
	
cpu_clean:
	echo "Clean cpu"
	$(MAKE) -C $(APP_CPU_DIR) clean

iptables:
	echo "Build iptables"
	$(MAKE) -C $(APP_IPTABLES_DIR)
	if test -e $(APP_IPTABLES_DIR)/iptables; \
	then echo "Compile iptables success"; \
	else echo "Compile iptables error!"; exit 1; \
	fi
	cp  $(APP_IPTABLES_DIR)/iptables  $(FILESYSTEM_DIR)/usr/bin/		
	cp  $(APP_IPTABLES_DIR)/iptables-restore  $(FILESYSTEM_DIR)/usr/bin/
	cp  $(APP_IPTABLES_DIR)/iptables-save  $(FILESYSTEM_DIR)/usr/bin/
ifneq ($(strip $(TCSUPPORT_IPV6_ADVANCE)),)
	cp  $(APP_IPTABLES_DIR)/ip6tables  $(FILESYSTEM_DIR)/usr/bin/
endif
	
iptables_clean:
	echo "Clean iptables"
	$(MAKE) -C $(APP_IPTABLES_DIR) clean

tc:
	echo "Build tc"
	$(MAKE) -C $(APP_IPROUTE_TC_DIR)
	if test -e $(APP_IPROUTE_TC_DIR)/tc/tc; \
	then echo "Compile tc success"; \
	else echo "Compile tc error;" exit 1; \
	fi
	cp $(APP_IPROUTE_TC_DIR)/tc/tc $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_IPROUTE_TC_DIR)/ip/ip $(FILESYSTEM_DIR)/usr/bin/

	
tc_clean:
	echo "Clean tc"
	$(MAKE) -C $(APP_IPROUTE_TC_DIR) clean
#Use new version ip command for DS-Lite and 6rd
ifneq ($(strip $(TCSUPPORT_DSLITE)),)
ip:
	echo "Build ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR)
	if test -e $(APP_IPROUTE_IP_DIR)/ip/ip; \
	then echo "Compile ip success"; \
	else echo "Compile ip error;" exit 1; \
	fi
	cp $(APP_IPROUTE_IP_DIR)/ip/ip $(FILESYSTEM_DIR)/usr/bin/

	
ip_clean:
	echo "Clean ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR) clean
else
ifneq ($(strip $(TCSUPPORT_6RD)),)
ip:
	echo "Build ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR)
	if test -e $(APP_IPROUTE_IP_DIR)/ip/ip; \
	then echo "Compile ip success"; \
	else echo "Compile ip error;" exit 1; \
	fi
	cp $(APP_IPROUTE_IP_DIR)/ip/ip $(FILESYSTEM_DIR)/usr/bin/	
ip_clean:
	echo "Clean ip"
	$(MAKE) -C $(APP_IPROUTE_IP_DIR) clean
else
ip:
ip_clean:
endif

ip:
ip_clean:
endif

ebtables:
	echo "Build ebtables"
	$(MAKE) -C $(APP_EBTABLES_DIR)
	if test -e $(APP_EBTABLES_DIR)/ebtables; \
	then echo "Compile ebtables success"; \
	else echo "Compile ebtables error!"; exit 1; \
	fi
	cp $(APP_EBTABLES_DIR)/ebtables  $(FILESYSTEM_DIR)/usr/bin/		
	cp $(APP_EBTABLES_DIR)/libebtc.so $(FILESYSTEM_DIR)/lib
	cp $(APP_EBTABLES_DIR)/extensions/*.so $(FILESYSTEM_DIR)/lib/
	cp $(APP_EBTABLES_DIR)/ethertypes $(FILESYSTEM_DIR)/usr/etc/
	
ebtables_clean:
	echo "Clean ebtables"
	$(MAKE) -C $(APP_EBTABLES_DIR) clean
	

mtd:
	echo "Build mtd"
	$(MAKE) -C $(APP_MTD_DIR)
	if test -e $(APP_MTD_DIR)/mtd; \
	then echo "Compile mtd success"; \
	else echo "Compile mtd error!"; exit 1; \
	fi
	cp $(APP_MTD_DIR)/mtd  $(FILESYSTEM_DIR)/userfs/bin/
	
mtd_clean:
	echo "Clean mtd"
	$(MAKE) -C $(APP_MTD_DIR) clean

ifneq ($(strip $(TCSUPPORT_CT)),)
pppd:
	echo "Build pppd"
	$(MAKE) -C $(APP_PPPD_DIR)
	if test -e $(APP_PPPD_DIR)/pppd/pppd; \
	then echo "Compile pppd success"; \
	else echo "Compile pppd error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/libpppoatm.so; \
	then echo "Compile libpppoatm.so success"; \
	else echo "Compile libpppoatm.so error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/pppoe/libpppoe.so; \
	then echo "Compile libpppoe.so success"; \
	else echo "Compile libpppoe.so error!"; exit 1; \
	fi
	$(MAKE) -C $(APP_PPPD_DIR) install
else
pppd:
	echo "Build pppd"
	$(MAKE) -C $(APP_PPPD_DIR)
	if test -e $(APP_PPPD_DIR)/pppd/pppd; \
	then echo "Compile pppd success"; \
	else echo "Compile pppd error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/pppoatm/libpppoatm.so; \
	then echo "Compile libpppoatm.so success"; \
	else echo "Compile libpppoatm.so error!"; exit 1; \
	fi
	if test -e $(APP_PPPD_DIR)/pppd/plugins/rp-pppoe/libpppoe.so; \
	then echo "Compile libpppoe.so success"; \
	else echo "Compile libpppoe.so error!"; exit 1; \
	fi
	cp $(APP_PPPD_DIR)/pppd/plugins/pppoatm/libpppoatm.so $(FILESYSTEM_DIR)/lib
	cp $(APP_PPPD_DIR)/pppd/plugins/rp-pppoe/libpppoe.so $(FILESYSTEM_DIR)/lib
	cp $(APP_PPPD_DIR)/pppd/pppd $(FILESYSTEM_DIR)/usr/bin/
#	$(MAKE) -C $(APP_PPPD_DIR) install
endif

pppd_clean:
	echo "Clean pppd"
	$(MAKE) -C $(APP_PPPD_DIR) clean

ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
tcci:
	cp  $(APP_BINARY_DIR)/$(TCPLATFORM)/tcci  $(FILESYSTEM_DIR)/usr/bin
	rm -f $(FILESYSTEM_DIR)/usr/bin/tce
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/tce
	rm -f $(FILESYSTEM_DIR)/usr/bin/sys
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/sys
	rm -f $(FILESYSTEM_DIR)/usr/bin/wan
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/wan
	rm -f $(FILESYSTEM_DIR)/usr/bin/w
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/w
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/hwnat
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/hwnat
endif
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/ether
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/ether
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/sendicmp  $(FILESYSTEM_DIR)/userfs/bin/			
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif

tcci_clean:
	echo "TC_BUILD_RELEASECODE: Build tcci, do nothing!"
else
tcci:
	echo "Build tcci"
	$(MAKE) -C $(APP_TCCI_DIR)
	if test -e $(APP_TCCI_DIR)/tcci; \
	then echo "Compile tcci success"; \
	else echo "Compile tcci error!"; exit 1; \
	fi
	cp $(APP_TCCI_DIR)/tcci  $(FILESYSTEM_DIR)/usr/bin/
	rm -f $(FILESYSTEM_DIR)/usr/bin/tce
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/tce
	rm -f $(FILESYSTEM_DIR)/usr/bin/sys
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/sys
	rm -f $(FILESYSTEM_DIR)/usr/bin/wan
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/wan
	rm -f $(FILESYSTEM_DIR)/usr/bin/w
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/w
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/hwnat
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/hwnat
endif
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/ether
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/ether
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd
	
	echo "Building sendicmp"
	$(MAKE) -C $(APP_SENDICMP_DIR)
	if test -e $(APP_SENDICMP_DIR)/sendicmp; \
	then echo "Compile sendicmp success"; \
	else echo "Compile sendicmp error!"; exit 1; \
	fi
	cp $(APP_SENDICMP_DIR)/sendicmp  $(FILESYSTEM_DIR)/userfs/bin/
			
endif
	
ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	#rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	#ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/etherd
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/etherd	
endif
ifneq ($(strip $(TCSUPPORT_USBDEVICE20)),)
	rm -f $(FILESYSTEM_DIR)/usr/bin/usb
	ln -s tcci $(FILESYSTEM_DIR)/usr/bin/usb
endif
		
tcci_clean:
	echo "Clean tcci"
	$(MAKE) -C $(APP_TCCI_DIR) clean
endif

#Building tcwdog
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
tcwdog:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/tcwdog $(FILESYSTEM_DIR)/usr/bin/
tcwdog_clean:
	echo "TC_BUILD_RELEASECODE: Build tcwdog, do nothing!"
else
tcwdog:
	echo "Build tcwdog"
	$(MAKE) -C $(APP_TCWDOG_DIR)
	if test -e $(APP_TCWDOG_DIR)/tcwdog; \
	then echo "Compile tcwdog success"; \
	else echo "Compile tcwdog error!"; exit 1; \
	fi
	cp $(APP_TCWDOG_DIR)/tcwdog  $(FILESYSTEM_DIR)/usr/bin/
	
tcwdog_clean:
	echo "Clean tcwdog"
	$(MAKE) -C $(APP_TCWDOG_DIR) clean
endif

utelnetd:
	echo "Build utelnetd"
	$(MAKE) -C $(APP_UTELNETD_DIR)
	if test -e $(APP_UTELNETD_DIR)/utelnetd; \
	then echo "Compile utelnetd success"; \
	else echo "Compile utelnetd error!"; exit 1; \
	fi
	cp $(APP_UTELNETD_DIR)/utelnetd  $(FILESYSTEM_DIR)/usr/bin/
	
utelnetd_clean:
	echo "Clean tcwdog"
	$(MAKE) -C $(APP_UTELNETD_DIR) clean
	
mxml:
	echo "Build mxml"
	$(MAKE) -C $(APP_MXML_DIR)
	if test -e $(APP_MXML_DIR)/libmxml.so.1.4; \
	then echo "Compile mxml success"; \
	else echo "Compile mxml error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_MXML_DIR)/libmxml.so.1.4
	$(MAKE) -C $(APP_MXML_DIR) install
	mv $(APP_MXML_DIR)/libmxml.so  $(FILESYSTEM_DIR)/lib/
	mv $(APP_MXML_DIR)/libmxml.so.*  $(FILESYSTEM_DIR)/lib/
	
mxml_clean:
	echo "Clean mxml"
	$(MAKE) -C $(APP_MXML_DIR) clean

boa:
ifneq ($(strip $(TCSUPPORT_WEBSERVER_SSL)),)
	echo "Build Matrix-ssl!"
	$(MAKE) -C $(APP_SSL_DIR)
	if test -e $(APP_SSL_DIR)/libmatrixssl.so; \
	then echo "Compile Matrix-ssl success"; \
	else echo "Compile Matrix-ssl error!"; exit 1; \
	fi
	cp $(APP_SSL_DIR)/libmatrixssl.so  $(FILESYSTEM_DIR)/lib/
	cp $(APP_BOA_DIR)/../key.pem $(FILESYSTEM_DIR)/usr/etc/
	cp $(APP_BOA_DIR)/../cert.pem $(FILESYSTEM_DIR)/usr/etc/
endif
	
	echo "Build boa"
	$(MAKE) -C $(APP_BOA_DIR)
	if test -e $(APP_BOA_DIR)/boa; \
	then echo "Compile boa success"; \
	else echo "Compile boa error!"; exit 1; \
	fi
	cp $(APP_BOA_DIR)/boa  $(FILESYSTEM_DIR)/userfs/bin/
		
boa_clean:
	echo "Clean boa"
	$(MAKE) -C $(APP_BOA_DIR) clean
ifneq ($(strip $(TCSUPPORT_WEBSERVER_SSL)),)
	$(MAKE) -C $(APP_SSL_DIR) clean
endif


#Build tcapi
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
tcapi:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/tcapi $(FILESYSTEM_DIR)/userfs/bin/
tcapi_clean:
	echo "TC_BUILD_RELEASECODE: Build tcapi, do nothing!"
else
tcapi:
	echo "Build tcapi"
	$(MAKE) -C $(APP_TCAPI_DIR)
	if test -e $(APP_TCAPI_DIR)/tcapi; \
	then echo "Compile tcapi success"; \
	else echo "Compile tcapi error!"; exit 1; \
	fi
	cp $(APP_TCAPI_DIR)/tcapi  $(FILESYSTEM_DIR)/userfs/bin/
	
tcapi_clean:
	echo "Clean tcapi"
	$(MAKE) -C $(APP_TCAPI_DIR) clean

endif

#Build rstats
rstats:
	echo "Build rstats"
	$(MAKE) -C $(APP_RSTATS_DIR)
	if test -e $(APP_RSTATS_DIR)/rstats; \
	then echo "Compile rstats success"; \
	else echo "Compile rstats error!"; exit 1; \
	fi
	cp $(APP_RSTATS_DIR)/rstats  $(FILESYSTEM_DIR)/userfs/bin/

rstats_clean:
	echo "Clean rstats"
	$(MAKE) -C $(APP_RSTATS_DIR) clean

#Build infosvr
infosvr:
	echo "Build infosvr"
	$(MAKE) -C $(APP_INFOSVR_DIR)
	if test -e $(APP_INFOSVR_DIR)/infosvr; \
	then echo "Compile infosvr success"; \
	else echo "Compile infosvr error!"; exit 1; \
	fi
	cp $(APP_INFOSVR_DIR)/infosvr  $(FILESYSTEM_DIR)/userfs/bin/

infosvr_clean:
	echo "Clean infosvr"
	$(MAKE) -C $(APP_INFOSVR_DIR) clean

auto_det:
	echo "Build auto_det"
	$(MAKE) -C $(APP_AUTO_DET_DIR)
	if test -e $(APP_AUTO_DET_DIR)/auto_det; \
	then echo "Compile auto_det success"; \
	else echo "Compile auto_det error!"; exit 1; \
	fi
	cp $(APP_AUTO_DET_DIR)/auto_det  $(FILESYSTEM_DIR)/userfs/bin/

auto_det_clean:
	echo "Clean auto_det"
	$(MAKE) -C $(APP_AUTO_DET_DIR) clean

#Build monitorcfgmgr
monitorcfgmgr:
	echo "Build monitorcfgmgr"
	$(MAKE) -C $(APP_MONITORCFGMGR_DIR)
	if test -e $(APP_MONITORCFGMGR_DIR)/monitorcfgmgr; \
	then echo "Compile monitorcfgmgr success"; \
	else echo "Compile monitorcfgmgr error!"; exit 1; \
	fi
	cp $(APP_MONITORCFGMGR_DIR)/monitorcfgmgr  $(FILESYSTEM_DIR)/userfs/bin/

monitorcfgmgr_clean:
	echo "Clean monitorcfgmgr"
	$(MAKE) -C $(APP_MONITORCFGMGR_DIR) clean

dhcrelay:
	echo "Build dhcrelay"
	$(MAKE) -C $(APP_DHCPRELAY_DIR)
	if test -e $(APP_DHCPRELAY_DIR)/relay/dhcrelay; \
	then echo "Compile dhcrelay success"; \
	else echo "Compile dhcrelay error!"; exit 1; \
	fi
	cp $(APP_DHCPRELAY_DIR)/relay/dhcrelay  $(FILESYSTEM_DIR)/userfs/bin/
	
dhcrelay_clean:
	echo "Clean dhcrelay"
	$(MAKE) -C $(APP_DHCPRELAY_DIR) clean
	
dproxy:
	echo "Build dproxy"
	$(MAKE) -C $(APP_DPROXY_DIR)
	if test -e $(APP_DPROXY_DIR)/dproxy; \
	then echo "Compile dproxy success"; \
	else echo "Compile dproxy error!"; exit 1; \
	fi
	cp $(APP_DPROXY_DIR)/dproxy  $(FILESYSTEM_DIR)/userfs/bin/
	
dproxy_clean:
	echo "Clean dproxy"
	$(MAKE) -C $(APP_DPROXY_DIR) clean

ez-ipupdate:
	echo "Build ddns"
	$(MAKE) -C $(APP_EZ-IPUPDATE_DIR)
	if test -e $(APP_EZ-IPUPDATE_DIR)/ez-ipupdate; \
	then echo "Compile ez-ipupdate success"; \
	else echo "Compile ez-ipupdate error!"; exit 1; \
	fi
	$(STRIP) $(APP_EZ-IPUPDATE_DIR)/ez-ipupdate
	cp $(APP_EZ-IPUPDATE_DIR)/ez-ipupdate  $(FILESYSTEM_DIR)/userfs/bin/
	
ez-ipupdate_clean:
	echo "Clean ddns"
	$(MAKE) -C $(APP_EZ-IPUPDATE_DIR) clean

email:
ifneq ($(strip $(ASUSSUPPORT_EMAIL)),)
	echo "Build email"
	echo "$(APP_EMAIL_DIR)"

	cd $(APP_EMAIL_DIR) && ./configure --with-ssl --sysconfdir=/etc --host=mips-linux CFLAGS=-I$(APP_OPENSSL_DIR)/include LDFLAGS=" -L$(APP_OPENSSL_DIR)" LIBS="-lcrypto -lssl"

	$(MAKE) -C $(APP_EMAIL_DIR)
	if test -e $(APP_EMAIL_DIR)/src/email; \
	then echo "Compile email success"; \
	else echo "Compile email error!"; exit 1; \
	fi
	#$(STRIP) $(APP_EMAIL_DIR)/src/email
	cp -rf $(APP_EMAIL_DIR)/email.conf  $(FILESYSTEM_DIR)/usr/etc/email/
	cp $(APP_EMAIL_DIR)/src/email  $(FILESYSTEM_DIR)/userfs/bin/
endif

email_clean:
ifneq ($(strip $(ASUSSUPPORT_EMAIL)),)
	echo "Clean mail"
	cd $(APP_EMAIL_DIR) && ./configure --host=mips-linux --with-ssl --sysconfdir=/etc
	$(MAKE) -C $(APP_EMAIL_DIR) clean
###	rm -f $(APP_EMAIL_DIR)/Makefile
###	rm -f $(APP_EMAIL_DIR)/config.log
###	rm -f $(APP_EMAIL_DIR)/config.status
###	rm -f $(APP_EMAIL_DIR)/dlib/Makefile
###	rm -f $(APP_EMAIL_DIR)/dlib/config.log
###	rm -f $(APP_EMAIL_DIR)/dlib/config.status
###	rm -f $(APP_EMAIL_DIR)/src/Makefile
endif

bftpd:
	echo "Build bftpd"
	$(MAKE) -C $(APP_BFTPD_DIR)
	if test -e $(APP_BFTPD_DIR)/bftpd; \
	then echo "Compile bftpd success"; \
	else echo "Compile bftpd error!"; exit 1; \
	fi
	cp $(APP_BFTPD_DIR)/bftpd  $(FILESYSTEM_DIR)/userfs/bin/
	
bftpd_clean:
	echo "Clean bftpd"
	$(MAKE) -C $(APP_BFTPD_DIR) clean


#Build inetd
inetd:
	echo "Build inetd"
	$(MAKE) -C $(APP_INETD_DIR)
	if test -e $(APP_INETD_DIR)/inetd; \
	then echo "Compile inetd success"; \
	else echo "Compile inetd error!"; exit 1; \
	fi
	cp $(APP_INETD_DIR)/inetd  $(FILESYSTEM_DIR)/userfs/bin/
	
inetd_clean:
	echo "Clean inetd"
	$(MAKE) -C $(APP_INETD_DIR) clean
	

#Build NET-SNMP
ifneq ($(strip $(TCSUPPORT_SNMP)),) 
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
snmpd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/snmpd $(FILESYSTEM_DIR)/userfs/bin/
snmpd_clean:
	echo "TC_BUILD_RELEASECODE: Build snmpd, do nothing!"
else
snmpd:
	echo "Build  snmpd"
ifneq ($(strip $(TCSUPPORT_SNMP_V3)),)
	echo "Build OPENSSL"
	$(MAKE) -C $(APP_OPENSSL_DIR)
	$(MAKE) install -C $(APP_OPENSSL_DIR)
	if test -e $(APP_OPENSSL_DIR)/OPSSL/lib/libcrypto.a; \
	then echo "Compile openssl success"; \
	else echo "Compile openssl error!"; exit 1; \
	fi
	cp -rf $(APP_OPENSSL_DIR)/OPSSL  $(APP_PUBLIC_DIR)/net-snmp-5.3.1/
	
	rm -rf $(FILESYSTEM_DIR)/usr/etc/net-snmp/
	mkdir $(FILESYSTEM_DIR)/usr/etc/net-snmp
	mkdir $(FILESYSTEM_DIR)/usr/etc/net-snmp/snmp
endif   	
	rm -rf $(APP_SNMPD_DIR)
	cp -rf $(APP_PUBLIC_DIR)/net-snmp-5.3.1 $(APP_SNMPD_DIR)
	
	cd $(APP_PUBLIC_DIR) && find . -name ".svn" | xargs rm -rf
	chmod 777 $(APP_PRIVATE_DIR)/code_reduce_patch/net-snmp-5.3.1_config.sh
	cd $(APP_SNMPD_DIR) && ../code_reduce_patch/net-snmp-5.3.1_config.sh
	
	if test -e $(APP_SNMPD_DIR)/agent/snmpd; \
	then echo "Compile snmpd success"; \
	else echo "Compile snmpd error!"; exit 1; \
	fi
	cp $(APP_SNMPD_DIR)/agent/snmpd  $(FILESYSTEM_DIR)/userfs/bin/
	
snmpd_clean:
	echo "Clean snmpd"
	rm -rf $(APP_SNMPD_DIR)
endif
else
snmpd:
snmpd_clean:
endif

#Build ntpclinet
ntpclient:
	echo "Build ntpclient"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	export TEMPCC=$(CC)
	export CC="$(CC)$(TC3162_CFLAG)"
	echo $(CC)
endif
	$(MAKE) -C $(APP_NTPCLIENT_DIR)
	if test -e $(APP_NTPCLIENT_DIR)/ntpclient; \
	then echo "Compile ntpclient success"; \
	else echo "Compile ntpclient error!"; exit 1; \
	fi
	cp $(APP_NTPCLIENT_DIR)/ntpclient  $(FILESYSTEM_DIR)/userfs/bin/
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	CC=$(TEMPCC)
endif
	
ntpclient_clean:
	echo "Clean ntpclient"
	$(MAKE) -C $(APP_NTPCLIENT_DIR) clean

ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
zebra:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/zebra $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ripd $(FILESYSTEM_DIR)/userfs/bin/
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ripngd $(FILESYSTEM_DIR)/userfs/bin/
endif
zebra_clean:
	echo "TC_BUILD_RELEASECODE: Zebra do nothing!"
else
zebra:
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
else
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-ipv6 --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
endif
	$(MAKE) -C $(APP_ZEBRA_DIR)
	if test -e $(APP_ZEBRA_DIR)/zebra/zebra; \
	then echo "Compile zebra success"; \
	else echo "Compile zebra error!"; exit 1; \
	fi	
	if test -e $(APP_ZEBRA_DIR)/ripd/ripd; \
	then echo "Compile ripd success"; \
	else echo "Compile ripd error!"; exit 1; \
	fi
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	if test -e $(APP_ZEBRA_DIR)/ripngd/ripngd; \
	then echo "Compile ripngd success"; \
	else echo "Compile ripngd error!"; exit 1; \
	fi
endif
	$(STRIP) --strip-unneeded $(APP_ZEBRA_DIR)/zebra/zebra
	$(STRIP) --strip-unneeded $(APP_ZEBRA_DIR)/ripd/ripd
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	$(STRIP) --strip-unneeded $(APP_ZEBRA_DIR)/ripngd/ripngd
endif
	cp $(APP_ZEBRA_DIR)/zebra/zebra  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_ZEBRA_DIR)/ripd/ripd  $(FILESYSTEM_DIR)/userfs/bin/
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cp $(APP_ZEBRA_DIR)/ripngd/ripngd  $(FILESYSTEM_DIR)/userfs/bin/
endif

ifneq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_RIPD)),)
	echo "Compile zebra success"
	echo "Compile ripd success"
else
	rm -f $(FILESYSTEM_DIR)/userfs/bin/zebra
	rm -f $(FILESYSTEM_DIR)/userfs/bin/ripd
endif
endif

zebra_clean:
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
else
	cd $(APP_ZEBRA_DIR) && ./configure --host=mips-linux --enable-user=admin --enable-group=root  --disable-ipv6 --disable-bgpd --disable-ospfd --disable-ospf6d --disable-watchquagga --disable-bgp-announce --disable-ospfapi --disable-ospfclient CFLAGS="$(CFG_CFLAGS)"
endif
	$(MAKE) -C $(APP_ZEBRA_DIR) clean
ifneq ($(strip $(TCSUPPORT_IPV6_RIPNG)),)
	if test -e $(FILESYSTEM_DIR)/userfs/bin/ripngd; \
	then rm $(FILESYSTEM_DIR)/userfs/bin/ripngd; \
	fi
endif
endif

#Build tftp-1.0
tftpd:
	echo "Build tftpd"
	$(MAKE) -C $(APP_TFTPD_DIR)
	if test -e $(APP_TFTPD_DIR)/tftpd; \
	then echo "Compile tftpd success"; \
	else echo "Compile tftpd error!"; exit 1; \
	fi
	cp $(APP_TFTPD_DIR)/tftpd  $(FILESYSTEM_DIR)/userfs/bin/
tftpd_clean:
	echo "Clean tftpd"
	$(MAKE) -C $(APP_TFTPD_DIR) clean
#Build wpas
ifneq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
wpas: openssl
	echo "BUILD WPA SUPPLICANT"
	# $(MAKE) -C $(APP_OPENSSL_DIR)
	# $(MAKE) install -C $(APP_OPENSSL_DIR)
	
	cp -rf $(APP_OPENSSL_DIR)/OPSSL $(APP_WPA_SUPP_DIR)/
	
	$(MAKE) wpa_supplicant -C $(APP_WPA_SUPP_DIR)
	if test -e $(APP_WPA_SUPP_DIR)/wpa_supplicant; \
	then echo "Wpa supplicant success"; \
	else echo "Wpa supplicant error"; exit 1; \
	fi;

	$(MAKE) wpa_cli -C $(APP_WPA_SUPP_DIR)
	if test -e $(APP_WPA_SUPP_DIR)/wpa_cli; \
	then echo "Wpa cli success"; \
	else echo "Wpa cli error"; exit 1; \
	fi;

	mips-linux-strip $(APP_WPA_SUPP_DIR)/wpa_supplicant
	mips-linux-strip $(APP_WPA_SUPP_DIR)/wpa_cli

	cp $(APP_WPA_SUPP_DIR)/wpa_supplicant $(FILESYSTEM_DIR)/userfs/bin
	cp $(APP_WPA_SUPP_DIR)/wpa_cli $(FILESYSTEM_DIR)/userfs/bin

wpas_clean: openssl_clean
	$(MAKE) -C $(APP_WPA_SUPP_DIR) clean
else
wpas:
	echo "NO Build WPA supplicant"
wpas_clean:
	echo "NO clean WPA supplicant"
endif

#Build wireless_tools.28
ifneq ($(strip $(TCSUPPORT_WLAN)),)
wirelesstool:
	echo "Build wirelesstool"
	$(MAKE) -C $(APP_WRIELESSTOOL_DIR) clean
	$(MAKE) -C $(APP_WRIELESSTOOL_DIR)
	if test -e $(APP_WRIELESSTOOL_DIR)/iwpriv; \
	then echo "Compile iwpriv success"; \
	else echo "Compile iwpriv error!"; exit 1; \
	fi
	if test -e $(APP_WRIELESSTOOL_DIR)/iwconfig; \
	then echo "Compile iwconfig success"; \
	else echo "Compile iwconfig error!"; exit 1; \
	fi
	if test -e $(APP_WRIELESSTOOL_DIR)/libiw.so.28; \
	then echo "Compile libiw.so.28 success"; \
	else echo "Compile libiw.so.28 error!"; exit 1; \
	fi
	cp $(APP_WRIELESSTOOL_DIR)/iwpriv  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_WRIELESSTOOL_DIR)/iwconfig  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_WRIELESSTOOL_DIR)/libiw.so.28  $(FILESYSTEM_DIR)/lib/
	
wirelesstool_clean:
	echo "Clean wirelesstool"
	$(MAKE) -C $(APP_WRIELESSTOOL_DIR) clean
	
else
wirelesstool:
	echo "No Build Wireless!"
wirelesstool_clean:
	echo "No Clean Wireless!"	
endif


#Build igmpproxy
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_IGMP_PROXY_V3)),)
igmpproxy:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/igmpproxy $(FILESYSTEM_DIR)/userfs/bin/
igmpproxy_clean:
	echo "TC_BUILD_RELEASECODE: Build igmpproxy, do nothing!"
else
igmpproxy:
	echo "Build igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR)
	if test -e $(APP_IGMPPROXY_DIR)/igmpproxy; \
	then echo "Compile igmpproxy success"; \
	else echo "Compile igmpproxy error!"; exit 1; \
	fi
	$(STRIP) $(APP_IGMPPROXY_DIR)/igmpproxy
	cp $(APP_IGMPPROXY_DIR)/igmpproxy  $(FILESYSTEM_DIR)/userfs/bin/
	
igmpproxy_clean:
	echo "Clean igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR) clean
endif
else
igmpproxy:
	echo "Build igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR)
	if test -e $(APP_IGMPPROXY_DIR)/igmpproxy; \
	then echo "Compile igmpproxy success"; \
	else echo "Compile igmpproxy error!"; exit 1; \
	fi
	$(STRIP) $(APP_IGMPPROXY_DIR)/igmpproxy
	cp $(APP_IGMPPROXY_DIR)/igmpproxy  $(FILESYSTEM_DIR)/userfs/bin/
	
igmpproxy_clean:
	echo "Clean igmpproxy"
	$(MAKE) -C $(APP_IGMPPROXY_DIR) clean
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
traceroute:
	echo "Build traceroute"
	$(MAKE) -C $(APP_TRACEROUTE_DIR)
	if test -e $(APP_TRACEROUTE_DIR)/traceroute/traceroute; \
	then echo "Compile traceroute success"; \
	else echo "Compile traceroute error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_TRACEROUTE_DIR)/traceroute/traceroute	
	cp $(APP_TRACEROUTE_DIR)/traceroute/traceroute  $(FILESYSTEM_DIR)/userfs/bin/traceroute6
	
traceroute_clean:
	echo "Clean traceroute"
	$(MAKE) -C $(APP_TRACEROUTE_DIR) clean
else
traceroute:
traceroute_clean:
endif

#Build hw_nat
ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
hw_nat:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ac $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/acl $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/hw_nat $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/mtr $(FILESYSTEM_DIR)/userfs/bin/
hw_nat_clean:
	echo "TC_BUILD_RELEASECODE: Build hw_nat, do nothing!"
else
hw_nat:
	echo "Build hw_nat"
	$(MAKE) -C $(APP_RA_HWNAT_DIR)
	if test -e $(APP_RA_HWNAT_DIR)/hw_nat; \
	then echo "Compile hw_nat success"; \
	else echo "Compile hw_nat error!"; exit 1; \
	fi
	cp $(APP_RA_HWNAT_DIR)/ac  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RA_HWNAT_DIR)/acl  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RA_HWNAT_DIR)/hw_nat  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RA_HWNAT_DIR)/mtr  $(FILESYSTEM_DIR)/userfs/bin/
	
hw_nat_clean:
	echo "Clean hw_nat"
	$(MAKE) -C $(APP_RA_HWNAT_DIR) clean
endif
else
hw_nat:
	echo "No Build hw_nat!"
hw_nat_clean:
	echo "No Clean hw_nat!"
endif

#Build sysstat
sysstat:
	echo "Build sysstat"
	$(MAKE) -C $(APP_SYSSTAT_DIR)
	if test -e $(APP_SYSSTAT_DIR)/mpstat; \
	then echo "Compile sysstat success"; \
	else echo "Compile sysstat error!"; exit 1; \
	fi
	cp $(APP_SYSSTAT_DIR)/mpstat  $(FILESYSTEM_DIR)/usr/bin/
	
sysstat_clean:
	echo "Clean sysstat"
	$(MAKE) -C $(APP_SYSSTAT_DIR) clean

ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
voip_api:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/tcVoIPApiServer $(FILESYSTEM_DIR)/userfs/bin/
voip_api_clean:
	echo "TC_BUILD_RELEASECODE: Build TC_VOIP_API, do nothing!"
else
voip_api:
	echo "Build TC_VOIP_API"
#	/*20100706 serena_modify*/
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_AC)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) DSP_API=AC
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) DSP_API=D2
endif	
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) DSP_API=D2
endif	
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O_SILAB)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) DSP_API=D2
endif	
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_2S1O)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) DSP_API=EVA
endif	
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_1S_89156)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) DSP_API=EVA
endif	
	if test -e $(APP_TC_VOIP_API_DIR)/bin/tcVoIPApiServer && test -e $(APP_TC_VOIP_API_DIR)/bin/libVoIPAPI.a ; \
	then echo "Compile TC_VOIP_API success"; \
	else echo "Compile TC_VOIP_API error!"; exit 1; \
	fi
	cp $(APP_TC_VOIP_API_DIR)/bin/tcVoIPApiServer  $(FILESYSTEM_DIR)/userfs/bin/
	
voip_api_clean:
#	/*20100706 serena_modify*/
	echo "Clean voip_api:"
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_AC)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) clean DSP_API=AC
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) clean DSP_API=D2
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O_SILAB)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) clean DSP_API=D2
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_D2_2S1O)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) clean DSP_API=D2
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_2S1O)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) clean DSP_API=EVA
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_1S_89156)),)
	$(MAKE) -C $(APP_TC_VOIP_API_DIR) clean DSP_API=EVA
endif
endif
else
voip_api:	
voip_api_clean:
endif
ifneq ($(strip $(TCSUPPORT_VOIP)),)
eva:
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_2S1O)),)
	$(MAKE) -C $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2 PLATFORM=tc3182
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_1S_89156)),)
	$(MAKE) -C $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2 PLATFORM=tc3182
endif
eva_clean:
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_2S1O)),)
	$(MAKE) -C $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2 clean PLATFORM=tc3182
endif
ifneq ($(strip $(TCSUPPORT_VOIP_WITH_DSP_EVA_1S_89156)),)
	$(MAKE) -C $(MODULES_VOICEDSP_EVA_DRIVER_DIR)/eva_v_0_2 clean PLATFORM=tc3182
endif	
endif


ifneq ($(strip $(TCSUPPORT_VOIP)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
mtf:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/TC_MTF $(FILESYSTEM_DIR)/userfs/bin/
mtf_clean:
	echo "TC_BUILD_RELEASECODE: Build TC_MTF, do nothing!"
else
mtf:
	echo "Build mtf"
	$(MAKE) -C $(APP_MTF_DIR) release=on
	if test -e $(APP_MTF_DIR)/binaries/linux_redhat-AS/Release/bin/TC_MTF; \
	then echo "Compile mtf success"; \
	else echo "Compile mtf error!"; exit 1; \
	fi
	cp $(APP_MTF_DIR)/binaries/linux_redhat-AS/Release/bin/TC_MTF  $(FILESYSTEM_DIR)/userfs/bin/
	
mtf_clean:
	echo "Clean mtf"
	$(MAKE) -C $(APP_MTF_DIR) clean release=on
endif
else
mtf:	
mtf_clean:
endif



#Build rp-pppoe-3.10
pppoe_svr:
pppoe_svr_clean:
pppoe-relay:
	echo "Build pppoe-relay"
	$(MAKE) -C $(APP_PPPOERELAY_DIR)
	if test -e $(APP_PPPOERELAY_DIR)/pppoe-relay; \
	then echo "Compile pppoe-relay success"; \
	else echo "Compile pppoe-relay error!"; exit 1; \
	fi
	cp $(APP_PPPOERELAY_DIR)/pppoe-relay  $(FILESYSTEM_DIR)/userfs/bin/
	
pppoe-relay_clean:
	echo "Clean pppoe-relay"
	$(MAKE) -C $(APP_PPPOERELAY_DIR) clean
	
ifneq ($(strip $(TCSUPPORT_IPV6)),)
#Build flex for radvd
flex:
	echo "Build flex"
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux
	$(MAKE) -C $(APP_FLEX_DIR)
	if test -e $(APP_FLEX_DIR)/libfl.a; \
	then echo "Compile flex success"; \
	else echo "Compile flex error!"; exit 1; \
	fi
	cp $(APP_FLEX_DIR)/libfl.a  $(PUBLIC_LIB_DIR)
	cp $(APP_FLEX_DIR)/libfl.a  $(LIB_DIR)
	
flex_clean:
	echo "Clean flex"
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux
	$(MAKE) -C $(APP_FLEX_DIR) clean

#Build radvd for IPv6
radvd:  flex
	echo "Build radvd"
	$(MAKE) -C $(APP_RADVD_DIR)
	if test -e $(APP_RADVD_DIR)/radvd; \
	then echo "Compile radvd success"; \
	else echo "Compile radvd error!"; exit 1; \
	fi
	$(STRIP) $(APP_RADVD_DIR)/radvd
	cp $(APP_RADVD_DIR)/radvd  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_RADVD_DIR)/radvd.conf  $(FILESYSTEM_DIR)/usr/etc/
ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	# cp $(APP_PRIVATE_DIR)/etc_script/wan_start_ipv6.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	cp $(APP_PRIVATE_DIR)/etc_script/wan_start_ipv6_asus.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
endif

radvd_clean: flex_clean
	echo "Clean radvd"
	$(MAKE) -C $(APP_RADVD_DIR) clean

#Build dhcpv6 for IPv6
dhcpv6:  flex
	echo "Build dhcpv6"
	$(MAKE) -C $(APP_DHCPV6_DIR)
	if test -e $(APP_DHCPV6_DIR)/dhcp6c; \
	then echo "Compile dhcpv6 client success"; \
	else echo "Compile dhcpv6 client error!"; exit 1; \
	fi
	if test -e $(APP_DHCPV6_DIR)/dhcp6s; \
	then echo "Compile dhcpv6 server success"; \
	else echo "Compile dhcpv6 server error!"; exit 1; \
	fi
	$(STRIP) $(APP_DHCPV6_DIR)/dhcp6c
	$(STRIP) $(APP_DHCPV6_DIR)/dhcp6s
	cp $(APP_DHCPV6_DIR)/dhcp6c  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_DHCPV6_DIR)/dhcp6s  $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_DHCPV6_DIR)/dhcp6c.conf  $(FILESYSTEM_DIR)/usr/etc/
	cp $(APP_DHCPV6_DIR)/dhcp6s.conf  $(FILESYSTEM_DIR)/usr/etc/
	cp $(APP_DHCPV6_DIR)/dhcp6c_script  $(FILESYSTEM_DIR)/usr/script/
	
dhcpv6_clean: flex_clean
	echo "Clean dhcpv6"
	$(MAKE) -C $(APP_DHCPV6_DIR) clean

#Build iproute
iproute:
#	echo "Build iproute"
#	$(MAKE) -C $(APP_IPROUTE_DIR)
#	if test -e $(APP_IPROUTE_DIR)/ip/ip; \
#	then echo "Compile ip success"; \
#	else echo "Compile ip error!"; exit 1; \
#	fi
#	cp $(APP_IPROUTE_DIR)/ip/ip  $(FILESYSTEM_DIR)/userfs/bin/
#	
iproute_clean:
#	echo "Clean iproute"
#	$(MAKE) -C $(APP_IPROUTE_DIR) clean
#Build MLD proxy application
ifneq ($(strip $(TCSUPPORT_MLD_PROXY)),)
ecmh:
	@echo "Build MLD proxy"
	$(MAKE) -C $(APP_MLDPROXY_DIR)
	@if test -e $(APP_MLDPROXY_DIR)/src/ecmh; \
	then echo "Compile MLD proxy success"; \
	else echo "Compile MLD proxy error!"; exit 1; \
	fi
	$(STRIP) $(APP_MLDPROXY_DIR)/src/ecmh
	cp $(APP_MLDPROXY_DIR)/src/ecmh  $(FILESYSTEM_DIR)/userfs/bin/

ecmh_clean:
	$(MAKE) -C $(APP_MLDPROXY_DIR) clean
else
ecmh:
ecmh_clean:
endif

else
radvd:
radvd_clean:
dhcpv6:
dhcpv6_clean:
iproute:
iproute_clean:
ecmh:
ecmh_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_NTFS)),)
ntfs:
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux --disable-library CFLAGS="-g -O2 -Wall -mips1"
else
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux-gnu --disable-library CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(APP_NTFS_DIR)
	$(STRIP) $(APP_NTFS_DIR)/src/ntfs-3g
	cp $(APP_NTFS_DIR)/src/ntfs-3g $(FILESYSTEM_DIR)/userfs/bin/
ntfs_clean:
ifneq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-gnu)
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux --disable-library CFLAGS="-g -O2 -Wall -mips1"
else
	cd $(APP_NTFS_DIR) && ./configure --host=mips-linux-gnu --disable-library CFLAGS="-g -O2 -Wall -mips32r2 -muclibc"
endif
	$(MAKE) -C $(APP_NTFS_DIR) clean  

else
ntfs:
ifneq ($(strip $(TCSUPPORT_USB_NTFS_UFSD)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/chkntfs $(FILESYSTEM_DIR)/usr/sbin
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/mkntfs $(FILESYSTEM_DIR)/usr/sbin
	# cd $(APP_UFSD_DIR)/$(TCPLATFORM) && \
		# ./configure --host=mips-linux \
		# --prefix=$(APP_UFSD_DIR)/$(TCPLATFORM) \
		# --with-ks-dir=$(KERNEL_DIR) \
		# --with-kb-dir=$(KERNEL_DIR) \
		# ;\
	# $(MAKE) -C $(APP_UFSD_DIR)/$(TCPLATFORM) driver

	# if test -e $(APP_UFSD_DIR)/$(TCPLATFORM)/ufsd.ko; \
	# then echo "Compile ufsd success"; \
	# else echo "Compile ufsd error!"; exit 1; \
	# fi
	# cp $(APP_UFSD_DIR)/$(TCPLATFORM)/ufsd.ko  $(FILESYSTEM_DIR)/lib/modules/usbhost/
endif

ntfs_clean:
ifneq ($(strip $(TCSUPPORT_USB_NTFS_UFSD)),)
	rm -f $(FILESYSTEM_DIR)/usr/sbin/chkntfs
	rm -f $(FILESYSTEM_DIR)/usr/sbin/mkntfs
	# $(MAKE) -C $(APP_UFSD_DIR)/$(TCPLATFORM) clean
	# rm $(FILESYSTEM_DIR)/lib/modules/usbhost/ufsd.ko
endif

endif	


#AutoMount
ifneq ($(strip $(TCSUPPORT_USB_AUTOMOUNT)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
automount:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/usb_auto_mount $(FILESYSTEM_DIR)/userfs/bin/
automount_clean:
else
automount:
	$(MAKE) -C $(APP_AUTOMOUNT_DIR)
	$(STRIP) $(APP_AUTOMOUNT_DIR)/usb_auto_mount
	cp $(APP_AUTOMOUNT_DIR)/usb_auto_mount $(FILESYSTEM_DIR)/userfs/bin/
automount_clean:
	$(MAKE) -C $(APP_AUTOMOUNT_DIR) clean
endif

else
automount:
automount_clean:
endif


ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
usb_3g_dongle:
#	the same deamon with pppd
#	$(MAKE) -C $(APP_USB_3G_PPP_DIR)
	$(STRIP) --strip-unneeded $(APP_USB_3G_PPP_DIR)/chat/chat
#	$(STRIP) --strip-unneeded $(APP_USB_3G_PPP_DIR)/pppd/pppd
	cp $(APP_USB_3G_PPP_DIR)/chat/chat $(FILESYSTEM_DIR)/userfs/bin/
#	cp $(APP_USB_3G_PPP_DIR)/pppd/pppd $(FILESYSTEM_DIR)/userfs/bin/pppd_3g
	rm -rf $(FILESYSTEM_DIR)/usr/etc/ppp/peers/
	mkdir $(FILESYSTEM_DIR)/usr/etc/ppp/peers
	cp $(APP_USB_3G_PPP_DIR)/wcdma $(FILESYSTEM_DIR)/usr/etc/ppp/peers/
	cp $(APP_USB_3G_PPP_DIR)/ppp_connect $(FILESYSTEM_DIR)/usr/etc/ppp/peers/

usb_3g_dongle_clean:
	$(MAKE) -C $(APP_USB_3G_PPP_DIR) clean

sdparm-1.02:
	echo "Build sdparm"
	cd $(APP_SDPARM_DIR) && ./configure --host=mips-linux --build=i686-linux
	$(MAKE) -C $(APP_SDPARM_DIR)
	if test -e $(APP_LIBDISK_DIR)/libdisk.so; then \
		echo "Compile LIB DISK success"; \
	else \
		echo "Compile LIB DISK error!"; \
		exit 1; \
	fi

	cp -f $(APP_SDPARM_DIR)/src/sdparm $(FILESYSTEM_DIR)/bin/
	$(STRIP) $(FILESYSTEM_DIR)/bin/sdparm

sdparm-1.02_clean:
	echo "Clean sdparm"
	-$(MAKE) -C $(APP_SDPARM_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/bin/sdparm

ifneq ($(strip $(TCSUPPORT_2_6_36_KERNEL)),)
usbmodeswitch: libusb10
	echo "Build usb-modeswitch-2.2.0"
	$(MAKE) -C $(APP_MODESWITCH_DIR) CFLAGS="-Os \
			-Wl,-R/lib:/usr/lib:/opt/usr/lib:/usr/local/share -lpthread \
			-I$(APP_LIBUSB10_DIR)/libusb -L$(APP_LIBUSB10_DIR)/libusb/.libs -lusb-1.0"

	cp -f $(APP_MODESWITCH_DIR)/usb_modeswitch $(FILESYSTEM_DIR)/usr/sbin/
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/usb_modeswitch

usbmodeswitch_clean:
	echo "Clean usb-modeswitch-2.2.0"
	$(MAKE) -C $(APP_MODESWITCH_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/usb_modeswitch
else
usbmodeswitch: libusb-0.1.12
	echo "Build usbmodeswitch"
	$(MAKE) -C $(APP_MODESWITCH_DIR) CFLAGS="-Os \
			-Wl,-R/lib:/usr/lib:/opt/usr/lib:/usr/local/share -lpthread \
			-I$(APP_LIBUSB0112_DIR) -L$(APP_LIBUSB0112_DIR)/.libs -lusb"

	cp -f $(APP_MODESWITCH_DIR)/usb_modeswitch $(FILESYSTEM_DIR)/usr/sbin/
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/usb_modeswitch

usbmodeswitch_clean:
	echo "Clean usbmodeswitch"
	$(MAKE) -C $(APP_MODESWITCH_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/usb_modeswitch
endif

comgt-0.32:
	echo "Build comgt"
	$(MAKE) -C $(APP_COMGT_DIR)
	cp -f $(APP_COMGT_DIR)/comgt $(FILESYSTEM_DIR)/bin
	rm -rf $(FILESYSTEM_DIR)/rom/etc/ppp/3g
	mkdir -p $(FILESYSTEM_DIR)/rom/etc/ppp/3g
	cp -rf $(APP_COMGT_DIR)/scripts/devices/* $(FILESYSTEM_DIR)/rom/etc/ppp/3g/
	cp -f $(APP_COMGT_DIR)/scripts/sigmon $(FILESYSTEM_DIR)/rom/etc/ppp/3g/
	cp -f $(APP_COMGT_DIR)/scripts/command $(FILESYSTEM_DIR)/rom/etc/ppp/3g/
	cp -f $(APP_COMGT_DIR)/scripts/dump $(FILESYSTEM_DIR)/rom/etc/ppp/3g/
	cp -f $(APP_COMGT_DIR)/scripts/operator $(FILESYSTEM_DIR)/rom/etc/ppp/3g/
	cp -f $(APP_COMGT_DIR)/scripts/getinfo $(FILESYSTEM_DIR)/rom/etc/ppp/3g/

comgt-0.32_clean:
	echo "Clean comgt"
	$(MAKE) -C $(APP_COMGT_DIR) clean

uqmi:
	echo "Build uqmi"
	$(MAKE) -C $(APP_UQMI_DIR) CFLAGS="-Os -I. -I./libubox" CC="$(CC)" STRIP="mips-linux-uclibc-strip" AR="mips-linux-uclibc-ar" RANLIB="mips-linux-uclibc-ranlib"
	cp -f $(APP_UQMI_DIR)/uqmi $(FILESYSTEM_DIR)/usr/sbin/
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/uqmi

uqmi_clean:
	echo "Clean uqmi"
	$(MAKE) -C $(APP_UQMI_DIR) clean

else
usb_3g_dongle:
usb_3g_dongle_clean:
sdparm-1.02:
sdparm-1.02_clean:
usbmodeswitch:
usbmodeswitch_clean:
comgt-0.32:
comgt-0.32_clean:
uqmi:
uqmi_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_PRINTER_SERVER)),)
usb_printer:
	# $(MAKE) -C $(APP_USB_PRINTER_DIR)
	# if test -e $(APP_USB_PRINTER_DIR)/p910nd; \
	# then echo "Compile usb printer server daemon success"; \
	# else echo "Compile usb printer server daemon error!"; exit 1; \
	# fi
	# $(STRIP) --strip-unneeded $(APP_USB_PRINTER_DIR)/p910nd
	# cp $(APP_USB_PRINTER_DIR)/p910nd $(FILESYSTEM_DIR)/userfs/bin/

usb_printer_clean:
	# $(MAKE) -C $(APP_USB_PRINTER_DIR) clean
else
usb_printer:
usb_printer_clean:
endif

ifneq ($(strip $(TCSUPPORT_USB_CAMERA)),)
usb_camera:
	$(MAKE) -C $(APP_MJPEG_LIB_DIR) 
	$(STRIP) --strip-unneeded $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so.62.0.0
	cp $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so.62.0.0 $(FILESYSTEM_DIR)/lib
	cp $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so.62 $(FILESYSTEM_DIR)/lib
	cp $(APP_MJPEG_LIB_DIR)/.libs/libjpeg.so $(FILESYSTEM_DIR)/lib
	$(MAKE) -C $(APP_USB_MJPEG_STREAM_SERVER_DIR)
	$(STRIP) --strip-unneeded $(APP_USB_MJPEG_STREAM_SERVER_DIR)/*.so
	$(STRIP) --strip-unneeded $(APP_USB_MJPEG_STREAM_SERVER_DIR)/mjpg_streamer
	cp $(APP_USB_MJPEG_STREAM_SERVER_DIR)/mjpg_streamer $(FILESYSTEM_DIR)/userfs/bin/
	cp $(APP_USB_MJPEG_STREAM_SERVER_DIR)/output_http.so $(FILESYSTEM_DIR)/lib
	cp $(APP_USB_MJPEG_STREAM_SERVER_DIR)/input_uvc.so $(FILESYSTEM_DIR)/lib
usb_camera_clean:
	$(MAKE) -C $(APP_MJPEG_LIB_DIR) clean 
	$(MAKE) -C $(APP_USB_MJPEG_STREAM_SERVER_DIR) clean
else
usb_camera:
usb_camera_clean:
endif


ifneq ($(strip $(TCSUPPORT_VPN)),)
vpn_tools:
	echo "Build openssl"
	$(MAKE) -C $(APP_OPENSSL_VPN_DIR)
	if test -d $(APP_OPENSSL_VPN_DIR)/lib; \
	then rm -rf $(APP_OPENSSL_VPN_DIR)/lib; \
	fi
	cd $(APP_OPENSSL_VPN_DIR) && mkdir lib && cp libcrypto.a libssl.a lib
	echo "Build flex"
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float"
	$(MAKE) -C $(APP_FLEX_DIR) clean
	$(MAKE) -C $(APP_FLEX_DIR)
	echo "Build ipsec-tools"
	cd $(APP_IPSEC_TOOLS) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float" --with-kernel-headers=$(KERNEL_DIR)/include --prefix=$(FILESYSTEM_DIR)/usr/ipsec_tools --with-openssl=$(APP_OPENSSL_VPN_DIR) --disable-security-context --enable-frag --enable-dpd --enable-natt --with-flexlib=$(APP_FLEX_DIR)/libfl.a
	$(MAKE) -C $(APP_IPSEC_TOOLS)
	if test -d $(FILESYSTEM_DIR)/usr/ipsec_tools; \
	then rm -rf $(FILESYSTEM_DIR)/usr/ipsec_tools; \
	fi
	mkdir $(FILESYSTEM_DIR)/usr/ipsec_tools
	mkdir $(FILESYSTEM_DIR)/usr/ipsec_tools/sbin
	$(STRIP) --strip-unneeded $(APP_IPSEC_TOOLS)/src/racoon/racoon
	$(STRIP) --strip-unneeded $(APP_IPSEC_TOOLS)/src/setkey/setkey
	cp $(APP_IPSEC_TOOLS)/src/racoon/racoon $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_IPSEC_TOOLS)/src/setkey/setkey $(FILESYSTEM_DIR)/usr/bin

vpn_tools_clean:
	echo "Clean ipsec-tools"
	touch $(APP_IPSEC_TOOLS)/aclocal.m4
	cd $(APP_IPSEC_TOOLS) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float" --with-kernel-headers=$(KERNEL_DIR)/include --prefix=$(FILESYSTEM_DIR)/usr/ipsec_tools --with-openssl=$(APP_OPENSSL_VPN_DIR) --disable-security-context --enable-frag --enable-dpd --enable-natt --with-flexlib=$(APP_FLEX_DIR)/libfl.a
	$(MAKE) -C $(APP_IPSEC_TOOLS) clean
	rm -rf $(FILESYSTEM_DIR)/usr/ipsec_tools
	echo "Clean flex"
	cd $(APP_FLEX_DIR) && ./configure --host=mips-linux-uclibc CC="mips-linux-uclibc-gcc -mips32r2 -msoft-float"
	$(MAKE) -C $(APP_FLEX_DIR) clean
	echo "Clean openssl"
	touch $(APP_OPENSSL_VPN_DIR)/Makefile
	$(MAKE) -C $(APP_OPENSSL_VPN_DIR) clean
	rm -rf $(APP_OPENSSL_VPN_DIR)/lib

else
vpn_tools:
vpn_tools_clean:
endif


#Build ssh
ifneq ($(strip $(TCSUPPORT_SSH)),)
#ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#ssh:
#	cp $(APP_SSH_DIR)/dropbear $(FILESYSTEM_DIR)/userfs/bin
#ssh_clean:
#	echo "TC_BUILD_RELEASECODE: Build ssh, do nothing!"
#else
ssh:
	echo "Build ssh"
#	cd $(APP_SSH_DIR) && ./configure --host=mips-linux --disable-zlib
	cd $(APP_SSH_DIR)
	$(MAKE) -C $(APP_SSH_DIR)
	if test -e $(APP_SSH_DIR)/dropbear; \
	then echo "Compile SSH success"; \
	else echo "Compile SSH error!"; exit 1; \
	fi
	cp $(APP_SSH_DIR)/dropbear $(FILESYSTEM_DIR)/userfs/bin/
ssh_clean:
	echo "Clean ssh"
	$(MAKE) -C $(APP_SSH_DIR) clean
#endif
else
ssh:
ssh_clean:
endif


#Build ethcmd
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
ethcmd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ethcmd $(FILESYSTEM_DIR)/userfs/bin/ethphxcmd
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
ethcmd_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build ethcmd, do nothing!"
else
ethcmd:
	echo "Build ethcmd"
	$(MAKE) -C $(APP_ETHCMD_DIR)
	if test -e $(APP_ETHCMD_DIR)/ethcmd; \
	then echo "Compile ethcmd success"; \
	else echo "Compile ethcmd error!"; exit 1; \
	fi
	cp $(APP_ETHCMD_DIR)/ethcmd  $(FILESYSTEM_DIR)/userfs/bin/ethphxcmd
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	rm -f $(FILESYSTEM_DIR)/userfs/bin/etherd
	ln -s ethphxcmd $(FILESYSTEM_DIR)/userfs/bin/etherd
endif	
	
ethcmd_clean:
	echo "Clean ethcmd"
	$(MAKE) -C $(APP_ETHCMD_DIR) clean
endif


#Build rtkethcmd
ifneq ($(strip $(TCSUPPORT_MTK_INTERNAL_ETHER_SWITCH)),)
rtkethcmd:
rtkethcmd_clean:
else
rtkethcmd:
	echo "Build rtkethcmd"
	$(MAKE) -C $(APP_RTKETHCMD_DIR)
	if test -e $(APP_RTKETHCMD_DIR)/rtkethcmd; \
	then echo "Compile rtkethcmd success"; \
	else echo "Compile rtkethcmd error!"; exit 1; \
	fi
	cp $(APP_RTKETHCMD_DIR)/rtkethcmd  $(FILESYSTEM_DIR)/userfs/bin/rtkethcmd

rtkethcmd_clean:
	echo "Clean rtkethcmd"
	$(MAKE) -C $(APP_RTKETHCMD_DIR) clean
endif

#Build pwctlcmd
ifneq ($(strip $(TCSUPPORT_CPU_RT65168)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
pwctlcmd:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/pwctlcmd $(FILESYSTEM_DIR)/userfs/bin/
pwctlcmd_clean:
	echo "CUSTOMER_BUILD_RELEASECODE: Build pwctlcmd, do nothing!"
else
pwctlcmd:
	echo "Build pwctlcmd"
	$(MAKE) -C $(APP_PWCTLCMD_DIR)
	if test -e $(APP_PWCTLCMD_DIR)/pwctlcmd; \
	then echo "Compile pwctlcmd success"; \
	else echo "Compile pwctlcmd error!"; exit 1; \
	fi
	cp $(APP_PWCTLCMD_DIR)/pwctlcmd  $(FILESYSTEM_DIR)/userfs/bin/
	
pwctlcmd_clean:
	echo "Clean pwctlcmd"
	$(MAKE) -C $(APP_PWCTLCMD_DIR) clean
endif
else
pwctlcmd:
pwctlcmd_clean:
endif
	
#Build 8021X
ifneq ($(strip $(TCSUPPORT_WLAN_8021X)),)
#ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
#8021X:
	#cp $(APP_BINARY_DIR)/rtdot1xd $(FILESYSTEM_DIR)/userfs/bin/
#8021X_clean:
	#echo "TC_BUILD_RELEASECODE: Build 8021X, do nothing!"
#else
8021X:
	echo "Build 8021X"
	$(MAKE) -C $(APP_8021X_DIR)
	if test -e $(APP_8021X_DIR)/rtdot1xd; \
	then echo "Compile 8021X success"; \
	else echo "Compile 8021X error!"; exit 1; \
	fi
	cp $(APP_8021X_DIR)/rtdot1xd  $(FILESYSTEM_DIR)/userfs/bin/
	
8021X_clean:
	echo "Clean 8021X"
	$(MAKE) -C $(APP_8021X_DIR) clean
#endif
else
8021X:
8021X_clean:
endif

#Build dnsmasq
dnsmasq:
	echo "Build dnsmasq"
	$(MAKE) -C $(APP_DNSMASQ_DIR)
	if test -e $(APP_DNSMASQ_DIR)/src/dnsmasq; \
	then echo "Compile dnsmasq success"; \
	else echo "Compile dnsmasq error!"; exit 1; \
	fi
	cp $(APP_DNSMASQ_DIR)/src/dnsmasq  $(FILESYSTEM_DIR)/userfs/bin/
	
dnsmasq_clean:
	echo "Clean dnsmasq"
	$(MAKE) -C $(APP_DNSMASQ_DIR) clean


#Build vconfig
vconfig:
	echo "Build vconfig"
	$(MAKE) -C $(APP_VCONFIG_DIR)
	if test -e $(APP_VCONFIG_DIR)/vconfig; \
	then echo "Compile vconfig success"; \
	else echo "Compile vconfig error!"; exit 1; \
	fi
	cp $(APP_VCONFIG_DIR)/vconfig  $(FILESYSTEM_DIR)/userfs/bin/
	
vconfig_clean:
	echo "Clean vconfig"
	$(MAKE) -C $(APP_VCONFIG_DIR) clean
	
ifneq ($(strip $(TCSUPPORT_AUTO_IP)),)
#Build avahi-autoipd
autoip:
	echo "Build libdaemon"
	cd $(APP_LIBDAEMON_DIR) && echo "ac_cv_func_setpgrp_void=yes" > config.cache
	cd $(APP_LIBDAEMON_DIR) && ./configure --host=mips-linux --config-cache --prefix=$(APP_PUBLIC_DIR)
	$(MAKE) -C $(APP_LIBDAEMON_DIR)
	$(MAKE) -C $(APP_LIBDAEMON_DIR) install
	$(STRIP) $(PUBLIC_LIB_DIR)/libdaemon.so.0.5.0
	#cp $(PUBLIC_LIB_DIR)/libdaemon.so* $(FILESYSTEM_DIR)/lib/

	cd $(APP_AUTOIP_DIR) && ./configure --host=mips-linux --with-distro=none --enable-qt4=no --enable-gtk=no --enable-gtk3=no --enable-dbus=no --enable-dbm=no --enable-gdbm=no --enable-libdaemon=yes --enable-python=no --with-xml=none PKG_CONFIG_PATH=$(PUBLIC_LIB_DIR)/pkgconfig/
	$(MAKE) -C $(APP_AUTOIP_DIR)/avahi-autoipd
	$(STRIP) $(APP_AUTOIP_DIR)/avahi-autoipd/avahi-autoipd
	cp $(APP_AUTOIP_DIR)/avahi-autoipd/avahi-autoipd $(FILESYSTEM_DIR)/userfs/bin/
	mv $(PUBLIC_LIB_DIR)/libdaemon.so* $(FILESYSTEM_DIR)/lib/
	cp  $(APP_AUTOIP_DIR)/avahi-autoipd/avahi-autoipd.action $(FILESYSTEM_DIR)/usr/script/
	cp  $(APP_AUTOIP_DIR)/avahi-autoipd/udhcpc_autoip.sh $(FILESYSTEM_DIR)/usr/script/
	
autoip_clean:
	if test -e $(APP_AUTOIP_DIR)/avahi-autoipd/Makefile; \
	then $(MAKE) -C $(APP_AUTOIP_DIR)/avahi-autoipd clean; \
	fi
	if test -e $(APP_LIBDAEMON_DIR)/Makefile; \
	then $(MAKE) -C $(APP_LIBDAEMON_DIR) clean; \
	fi

else
autoip:
autoip_clean:
endif

ifneq ($(strip $(TCSUPPORT_DMS)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
dms:
	rm -rf $(FILESYSTEM_DIR)/userfs/dlna
	cp -R $(APP_BINARY_DIR)/$(TCPLATFORM)/dlna $(FILESYSTEM_DIR)/userfs/dlna
dms_clean:
	echo "TC_BUILD_RELEASECODE: Build dms, do nothing!"
else
dms:
	cd $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install/Thirdp
	$(MAKE) -C $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6
	$(MAKE) -C $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ install

	cd $(APP_DMS_DIR)/src && ./premake.sh
	cd $(APP_DMS_DIR)/src && ./set.sh
ifneq ($(strip $(TCSUPPORT_DMS_FULL_FORMAT)),)
	cd $(APP_DMS_DIR)/src && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install CFLAGS="-g -02 -DDMS_FULL_FORMAT"
else
	cd $(APP_DMS_DIR)/src && ./configure --host=mips-linux --prefix=$(APP_DMS_DIR)/install
endif
	$(MAKE) -C $(APP_DMS_DIR)/src
	$(MAKE) -C $(APP_DMS_DIR)/src install

	$(MAKE) -C $(APP_DMS_DIR)/src/dms/UnitTest
	$(MAKE) -C $(APP_DMS_DIR)/src/dms/UnitTest install

	if test -d $(APP_DMS_DIR)/dlna_output; \
	then rm -rf $(APP_DMS_DIR)/dlna_output; \
	fi	
	mkdir $(APP_DMS_DIR)/dlna_output
	mkdir $(APP_DMS_DIR)/dlna_output/bin
	mkdir $(APP_DMS_DIR)/dlna_output/lib
	mkdir $(APP_DMS_DIR)/dlna_output/Thirdp
	mkdir $(APP_DMS_DIR)/dlna_output/Thirdp/lib

	$(STRIP) $(APP_DMS_DIR)/install/bin/dlna_dmsTcApp
	cp $(APP_DMS_DIR)/install/bin/dlna_dmsTcApp $(APP_DMS_DIR)/dlna_output/bin/
	cp $(APP_DMS_DIR)/install/share/*.* $(APP_DMS_DIR)/dlna_output/bin/
	$(STRIP) $(APP_DMS_DIR)/install/lib/libdlna_dms.so.0.0.0
	mv $(APP_DMS_DIR)/install/lib/libdlna_dms.so* $(APP_DMS_DIR)/dlna_output/lib/
	$(STRIP) $(APP_DMS_DIR)/install/Thirdp/lib/libixml.so.2.0.4
	$(STRIP) $(APP_DMS_DIR)/install/Thirdp/lib/libthreadutil.so.2.2.3
	$(STRIP) $(APP_DMS_DIR)/install/Thirdp/lib/libupnp.so.3.0.5

	mv $(APP_DMS_DIR)/install/Thirdp/lib/libixml.so* $(APP_DMS_DIR)/dlna_output/Thirdp/lib/
	mv $(APP_DMS_DIR)/install/Thirdp/lib/libthreadutil.so* $(APP_DMS_DIR)/dlna_output/Thirdp/lib/
	mv $(APP_DMS_DIR)/install/Thirdp/lib/libupnp.so* $(APP_DMS_DIR)/dlna_output/Thirdp/lib/
	mkdir $(APP_DMS_DIR)/dlna_output/media
	if test -d $(FILESYSTEM_DIR)/userfs/dlna; \
	then rm -rf $(FILESYSTEM_DIR)/userfs/dlna; \
	fi
	cp -R $(APP_DMS_DIR)/dlna_output $(FILESYSTEM_DIR)/userfs/dlna
	cp  $(APP_ETC_SCRIPT_DIR)/dms_start.sh $(FILESYSTEM_DIR)/usr/script/
	
dms_clean:
	if test -e $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/Makefile; \
	then $(MAKE) -C $(APP_DMS_DIR)/thirdp_src/libupnp-1.6.6/ clean; \
	fi
	if test -e $(APP_DMS_DIR)/src/Makefile; \
	then $(MAKE) -C $(APP_DMS_DIR)/src clean; \
	fi
	if test -d $(APP_DMS_DIR)/dlna_output; \
	then rm -rf $(APP_DMS_DIR)/dlna_output; \
	fi
	if test -d $(FILESYSTEM_DIR)/userfs/dlna; \
	then rm -rf $(FILESYSTEM_DIR)/userfs/dlna; \
	fi
	
endif
else
dms:
dms_clean:
endif


ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(CUSTOMER_BUILD_RELEASECODE)),)
cmd_ci:
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/atmcmdd $(FILESYSTEM_DIR)/usr/bin
endif
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/atmcmd $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/adslcmd $(FILESYSTEM_DIR)/usr/bin/adslphxcmd

endif
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/algcmd $(FILESYSTEM_DIR)/usr/bin/
ifneq ($(strip $(TCSUPPORT_WLAN)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/wlancmd $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd
endif
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ate $(FILESYSTEM_DIR)/usr/bin/ATE
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/firewallcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/qoscmd $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/portbindcmd $(FILESYSTEM_DIR)/usr/bin
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)	
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/accesslimitcmd $(FILESYSTEM_DIR)/usr/bin	
endif
ifneq ($(strip $(TCSUPPORT_PRODUCTIONLINE)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/prolinecmd $(FILESYSTEM_DIR)/usr/bin	
endif
cmd_ci_clean:
	echo "TC_BUILD_RELEASECODE: Build cmdci, do nothing!"
else
cmd_ci:
ifeq ($(strip $(TCSUPPORT_CT)),)
	echo "Build cmd_ci"
	$(MAKE) -C $(APP_CMDCI_DIR)
	if test -e $(APP_CMDCI_DIR)/atmcmd; \
	then echo "Compile atmcmd success"; \
	else echo "Compile atmcmd error!"; exit 1; \
	fi
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/atmcmdd $(FILESYSTEM_DIR)/usr/bin
endif
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_CMDCI_DIR)/atmcmd  $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	cp $(APP_CMDCI_DIR)/adslcmd  $(FILESYSTEM_DIR)/usr/bin/adslphxcmd
endif

ifneq ($(strip $(TCSUPPORT_WLAN)),)
	cp $(APP_CMDCI_DIR)/wlancmd $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd
endif
	cp $(APP_CMDCI_DIR)/ate $(FILESYSTEM_DIR)/usr/bin/ATE
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/algcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/firewallcmd $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/qoscmd $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/portbindcmd $(FILESYSTEM_DIR)/usr/bin
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)	
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/accesslimitcmd $(FILESYSTEM_DIR)/usr/bin	
endif
ifneq ($(strip $(TCSUPPORT_PRODUCTIONLINE)),)
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/prolinecmd $(FILESYSTEM_DIR)/usr/bin	
endif
cmd_ci_clean:
ifeq ($(strip $(TCSUPPORT_CT)),)
	echo "TC_BUILD_RELEASECODE: Build atmcmd adslcmd wlancmd!"
	$(MAKE) -C $(APP_CMDCI_DIR) clean

endif
endif
else
cmd_ci:
	echo "Build cmd_ci"
	$(MAKE) -C $(APP_CMDCI_DIR)
	if test -e $(APP_CMDCI_DIR)/atmcmd; \
	then echo "Compile atmcmd success"; \
	else echo "Compile atmcmd error!"; exit 1; \
	fi
ifneq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_CMDCI_DIR)/atmcmdd $(FILESYSTEM_DIR)/usr/bin
endif
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp -f $(APP_CMDCI_DIR)/atmcmd  $(FILESYSTEM_DIR)/usr/bin/atmphxcmd
	cp -f $(APP_CMDCI_DIR)/adslcmd  $(FILESYSTEM_DIR)/usr/bin/adslphxcmd

endif

ifneq ($(strip $(TCSUPPORT_WLAN)),)
	cp -f $(APP_CMDCI_DIR)/wlancmd  $(FILESYSTEM_DIR)/usr/bin/wlanphxcmd
endif
	cp $(APP_CMDCI_DIR)/algcmd  $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_CMDCI_DIR)/firewallcmd  $(FILESYSTEM_DIR)/usr/bin/
	cp $(APP_CMDCI_DIR)/qoscmd $(FILESYSTEM_DIR)/usr/bin
	cp $(APP_CMDCI_DIR)/portbindcmd $(FILESYSTEM_DIR)/usr/bin
ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)	
	cp $(APP_CMDCI_DIR)/accesslimitcmd $(FILESYSTEM_DIR)/usr/bin	
endif
ifneq ($(strip $(TCSUPPORT_PRODUCTIONLINE)),)
	cp $(APP_CMDCI_DIR)/prolinecmd $(FILESYSTEM_DIR)/usr/bin	
endif
cmd_ci_clean:
	echo "Clean cmd_ci"
	$(MAKE) -C $(APP_CMDCI_DIR) clean

endif

ifneq ($(strip $(TCSUPPORT_RA_MENU)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
ra_menu:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/ra_menu $(FILESYSTEM_DIR)/userfs/bin/
ra_menu_clean:
	echo "TC_BUILD_RELEASECODE: Build ra_menu, do nothing!"
else
ra_menu:
	echo "ra_menu building"
	$(MAKE) -C $(APP_RA_MENU_DIR)
	if test -e $(APP_RA_MENU_DIR)/ra_menu; \
	then echo "Compile ra_menu success"; \
	else echo "Compile ra_menu error!"; exit 1; \
	fi
	cp $(APP_RA_MENU_DIR)/ra_menu  $(FILESYSTEM_DIR)/userfs/bin/
ra_menu_clean:
	echo "ra_menu clean"
	$(MAKE) -C $(APP_RA_MENU_DIR) clean
endif
else
ra_menu:
	echo "Not support ra_menu"
ra_menu_clean:
	echo "Not support ra_menu"
endif


ifneq ($(strip $(TCSUPPORT_SIPROXD)),)
#Build siproxd-0.8.0
siproxd:
	echo "Build libosip2-2.0.4"
	cd $(APP_LIBOSIP_DIR) && touch aclocal.m4
	chmod 777 $(APP_LIBOSIP_DIR)/configure
	cd $(APP_LIBOSIP_DIR) && ./configure --host=mips-linux --with-pic --prefix=$(APP_LIBOSIP_DIR)/installDir
	$(MAKE) -C $(APP_LIBOSIP_DIR)
	$(MAKE) -C $(APP_LIBOSIP_DIR) install
	if test -e $(APP_LIBOSIP_DIR)/installDir/lib/libosip2.2.0.4; \
	then echo "Compile libosip success"; \
	else echo "Compile libosip error!"; exit 1; \
	fi
	
	echo "Build siproxd-0.5.12"
	cd $(APP_SIPROXD_DIR) && touch configure.in
	chmod 777 $(APP_SIPROXD_DIR)/configure
	cd $(APP_SIPROXD_DIR) && ./configure --host=mips-linux --prefix=$(APP_SIPROXD_DIR)/installDir --with-libosip-prefix=$(APP_LIBOSIP_DIR)/installDir
	$(MAKE) -C $(APP_SIPROXD_DIR)
	$(MAKE) -C $(APP_SIPROXD_DIR) install
	if test -e $(APP_SIPROXD_DIR)/installDir/sbin/siproxd; \
	then echo "Compile siporxd success"; \
	else echo "Compile siproxd error!"; exit 1; \
	fi
	$(STRIP) --strip-unneeded $(APP_SIPROXD_DIR)/installDir/sbin/siproxd
	cp $(APP_SIPROXD_DIR)/installDir/sbin/siproxd  $(FILESYSTEM_DIR)/userfs/bin/
	
siproxd_clean:
	echo "Clean siproxd-0.5.12"
	if test -e $(APP_LIBOSIP_DIR)/installDir/lib/libosip2.a; \
	then cd $(APP_SIPROXD_DIR) && touch configure.in; \
	chmod 777 $(APP_SIPROXD_DIR)/configure; \
	cd $(APP_SIPROXD_DIR) && ./configure --host=mips-linux --prefix=$(APP_SIPROXD_DIR)/installDir --with-libosip-prefix=$(APP_LIBOSIP_DIR)/installDir; \
	else cd $(APP_SIPROXD_DIR); \
	fi
	if test -e $(APP_SIPROXD_DIR)/Makefile; \
	then $(MAKE) -C $(APP_SIPROXD_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
	
	echo "Clean libosip2-2.0.4"
	if test -e $(APP_LIBOSIP_DIR)/installDir/lib/libosip2.a; \
	then cd $(APP_LIBOSIP_DIR) && touch aclocal.m4; \
	chmod 777 $(APP_LIBOSIP_DIR)/configure; \
	cd $(APP_LIBOSIP_DIR) && ./configure --host=mips-linux --with-pic --prefix=$(APP_LIBOSIP_DIR)/installDir; \
	else cd $(APP_LIBOSIP_DIR); \
	fi
	if test -e $(APP_LIBOSIP_DIR)/Makefile; \
	then $(MAKE) -C $(APP_LIBOSIP_DIR) clean; \
	else echo "Makefile not exist"; \
	fi
else
siproxd:
	echo "Not support siproxd"
siproxd_clean:
	echo "Not support siproxd"
endif

#USB Backup and  Restore
ifneq ($(strip $(TCSUPPORT_CT_USB_BACKUPRESTORE)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
backuprestore:
	echo "Build backuprestore"
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/backuprestorecmd $(FILESYSTEM_DIR)/usr/bin/
backuprestore_clean:
	echo "TC_BUILD_RELEASECODE: Build backuprestore, do nothing!"
else
backuprestore:
	echo "Build backuprestore"
	$(MAKE) -C $(APP_BACKUPRESTORE_DIR)
	cp $(APP_BACKUPRESTORE_DIR)/backuprestorecmd $(FILESYSTEM_DIR)/usr/bin/
	
backuprestore_clean:
	echo "Clean backuprestore"
	$(MAKE) -C $(APP_BACKUPRESTORE_DIR) clean
endif
else
backuprestore:
backuprestore_clean:
endif

ifneq ($(strip $(TCSUPPORT_RESTORE_LINOS_INFO)),)
ifneq ($(strip $(TC_BUILD_RELEASECODE)),)
restore_linos_info:
	cp $(APP_BINARY_DIR)/$(TCPLATFORM)/restore_linos_info $(FILESYSTEM_DIR)/userfs/bin/
restore_linos_info_clean:
else
restore_linos_info:
	echo "Build restore linos info!"
	$(MAKE) -C $(APP_RESTORE_LINOS_INFO_DIR)
	if test -e $(APP_RESTORE_LINOS_INFO_DIR)/restore_linos_info; \
	then echo "Compile restore_linos_info success"; \
	else echo "Compile restore_linos_info error!"; exit 1; \
	fi
	cp  $(APP_RESTORE_LINOS_INFO_DIR)/restore_linos_info  $(FILESYSTEM_DIR)/userfs/bin/

restore_linos_info_clean:
	echo "Clean restore_linos_info!"
	$(MAKE) -C $(APP_RESTORE_LINOS_INFO_DIR) clean
endif
else
restore_linos_info:
restore_linos_info_clean:
endif

ifneq ($(strip $(TCSUPPORT_SAMBA)),)
#Build samba
samba:
	echo "Build Samba-3.0.2"
	# cd $(APP_SAMBA_DIR)/source
	# $(MAKE) -C $(APP_SAMBA_DIR)/source
	cd $(APP_SAMBA_DIR)
	$(MAKE) -C $(APP_SAMBA_DIR)
	if (test -e $(APP_SAMBA_DIR)/source/bin/nmbd)&&(test -e $(APP_SAMBA_DIR)/source/bin/smbd); \
	then echo "Compile samba success"; \
	else echo "Compile samba error!"; exit 1; \
	fi
	
	if test -d  $(FILESYSTEM_DIR)/usr/etc/samba; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/samba; \
	fi
	
	mkdir $(FILESYSTEM_DIR)/usr/etc/samba

#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/samba.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/samba_add_dir.sh $(FILESYSTEM_DIR)/usr/script/
#endif

	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/nmbd
	cp -f $(APP_SAMBA_DIR)/source/bin/nmbd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/smbd
	cp -f $(APP_SAMBA_DIR)/source/bin/smbd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/smbpasswd
	cp -f $(APP_SAMBA_DIR)/source/bin/smbpasswd  $(FILESYSTEM_DIR)/userfs/bin/
	$(STRIP) --strip-unneeded $(APP_SAMBA_DIR)/source/bin/libbigballofmud.so
	cp -f $(APP_SAMBA_DIR)/source/bin/libbigballofmud.so  $(FILESYSTEM_DIR)/lib/
	cd $(FILESYSTEM_DIR)/lib
	ln -snf libbigballofmud.so  $(FILESYSTEM_DIR)/lib/libbigballofmud.so.0

	
samba_clean:
	echo "Clean Samba-3.0.2"
###	cd $(APP_SAMBA_DIR)/source
###	if test -e $(APP_SAMBA_DIR)/source/Makefile; \
###	then $(MAKE) -C $(APP_SAMBA_DIR)/source distclean; \
###	else echo "Makefile not exist"; \
###	fi
	cd $(APP_SAMBA_DIR)
	$(MAKE) -C $(APP_SAMBA_DIR) distclean
	rm -rf $(FILESYSTEM_DIR)/usr/script/samba.sh
	rm -rf $(FILESYSTEM_DIR)/usr/script/samba_add_dir.sh
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/smbd
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/smbpasswd
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/libbigballofmud.so

samba_webdav:
	echo "Build Samba for WebDAV"
	$(MAKE) -C $(APP_SAMBA_FOR_WEBDAV_DIR)
	if (test -e $(APP_SAMBA_FOR_WEBDAV_DIR)/source3/bin/libsmbclient.so); \
	then echo "Compile samba_webdav success"; \
	else echo "Compile samba_webdav error!"; exit 1; \
	fi
	
	$(STRIP) --strip-unneeded $(APP_SAMBA_FOR_WEBDAV_DIR)/source3/bin/libsmbclient.so.0
	cp -Pf $(APP_SAMBA_FOR_WEBDAV_DIR)/source3/bin/libsmbclient.so* $(FILESYSTEM_DIR)/lib/
	
samba_webdav_clean:
	echo "Clean Samba for WebDAV"
	$(MAKE) -C $(APP_SAMBA_FOR_WEBDAV_DIR) clean
	
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/libsmbclient.so*
else
samba:
samba_clean:	
endif

#Build shared
shared:
	echo "Build shared library"
	$(MAKE) -C $(APP_SHARED_DIR)
	cp -f $(APP_SHARED_DIR)/libshared.so  $(FILESYSTEM_DIR)/lib/

shared_clean:
	echo "Clean shared library"
	$(MAKE) -C $(APP_SHARED_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/lib/libshared.so

#Build libdisk
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
libdisk:
	echo "Build USB disk library"
	$(MAKE) -C $(APP_LIBDISK_DIR)
	if test -e $(APP_LIBDISK_DIR)/libdisk.so; \
	then echo "Compile LIB DISK success"; \
	else echo "Compile LIB DISK error!"; exit 1; \
	fi

	cp -f $(APP_LIBDISK_DIR)/libdisk.so  $(FILESYSTEM_DIR)/lib/
	# cp -f $(APP_LIBDISK_DIR)/test_disk1  $(FILESYSTEM_DIR)/userfs/bin/
	# cp -f $(APP_LIBDISK_DIR)/test_disk2  $(FILESYSTEM_DIR)/userfs/bin/
	cp -f $(APP_LIBDISK_DIR)/test_share  $(FILESYSTEM_DIR)/sbin/
	cd $(FILESYSTEM_DIR)/sbin && ln -sf test_share test_of_var_files
	cp -f $(APP_LIBDISK_DIR)/write_smb_conf  $(FILESYSTEM_DIR)/userfs/bin/
	# cp -f $(APP_LIBDISK_DIR)/write_ftpd_conf  $(FILESYSTEM_DIR)/userfs/bin/
	cp -f $(APP_LIBDISK_DIR)/write_webdav_conf  $(FILESYSTEM_DIR)/userfs/bin/

libdisk_clean:
	echo "Clean USB disk library"
	$(MAKE) -C $(APP_LIBDISK_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/lib/libdisk.so
	# rm -rf $(FILESYSTEM_DIR)/userfs/bin/test_disk1
	# rm -rf $(FILESYSTEM_DIR)/userfs/bin/test_disk2
	rm -rf $(FILESYSTEM_DIR)/sbin/test_share
	rm -rf $(FILESYSTEM_DIR)/sbin/test_of_var_files
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/write_smb_conf
	# rm -rf $(FILESYSTEM_DIR)/userfs/bin/write_ftpd_conf
	rm -rf $(FILESYSTEM_DIR)/userfs/bin/write_webdav_conf
else
libdisk:
libdisk_clean:
endif

ifneq ($(strip $(TCSUPPORT_USBHOST)),)
iconv/stamp-h1:
	if test ! -e $(APP_LIBICONV_DIR)/stamp-h1; then \
		cd $(APP_LIBICONV_DIR) && \
		./configure --host=mips-linux;\
	fi
iconv: iconv/stamp-h1
	echo "Build libiconv"
	$(MAKE) -C $(APP_LIBICONV_DIR)
	if test -e $(APP_LIBICONV_DIR)/lib/.libs/libiconv.so.2.5.1; \
	then echo "Compile libiconv success"; \
	else echo "Compile libiconv error!"; exit 1; \
	fi

	cp -Pf $(APP_LIBICONV_DIR)/lib/.libs/libiconv.so*  $(FILESYSTEM_DIR)/lib/
	
iconv_clean: iconv/stamp-h1
	echo "Clean libiconv"
	$(MAKE) -C $(APP_LIBICONV_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/lib/libiconv.so*

else
iconv:
iconv_clean:
endif

#Build vsftpd
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
vsftpd:
	echo "Build vsftpd"
	$(MAKE) -C $(APP_VSFTPD_DIR)
	if test -e $(APP_VSFTPD_DIR)/vsftpd; \
	then echo "Compile vsftpd success"; \
	else echo "Compile vsftpd error!"; exit 1; \
	fi
	
	cp -f $(APP_VSFTPD_DIR)/vsftpd  $(FILESYSTEM_DIR)/userfs/bin/
	
vsftpd_clean:
	echo "Clean vsftpd"
	$(MAKE) -C $(APP_VSFTPD_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/userfs/bin/vsftpd
else
vsftpd:
vsftpd_clean:
endif

#Build hotplug2
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
hotplug2:
	echo "Build hotplug2"
	$(MAKE) -C $(APP_HOTPLUG2_DIR)
	if test -e $(APP_HOTPLUG2_DIR)/hotplug2; \
	then echo "Compile hotplug2 success"; \
	else echo "Compile hotplug2 error!"; exit 1; \
	fi
	
	cp -f $(APP_HOTPLUG2_DIR)/hotplug2  $(FILESYSTEM_DIR)/userfs/bin/
	cp -f $(APP_HOTPLUG2_DIR)/examples/hotplug2.rules-2.6kernel  $(FILESYSTEM_DIR)/usr/etc/hotplug2.rules
	
hotplug2_clean:
	echo "Clean hotplug2"
	$(MAKE) -C $(APP_HOTPLUG2_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/userfs/bin/hotplug2
	rm -rf $(FILESYSTEM_DIR)/usr/etc/hotplug2.rules
else
hotplug2:
hotplug2_clean:
endif

#Build udev
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
udev:
	echo "Build udev"
	$(MAKE) -C $(APP_UDEV_DIR)
	if test -e $(APP_UDEV_DIR)/udevtrigger; \
	then echo "Compile udev success"; \
	else echo "Compile udev error!"; exit 1; \
	fi
	
	cp -f $(APP_UDEV_DIR)/udevtrigger  $(FILESYSTEM_DIR)/sbin/
	
udev_clean:
	echo "Clean udev"
	$(MAKE) -C $(APP_UDEV_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/sbin/udevtrigger
else
udev:
udev_clean:
endif

#Build rc
rc:
	echo "Build rc"
	$(MAKE) -C $(APP_RC_DIR)
	if test -e $(APP_RC_DIR)/rc; \
	then echo "Compile rc success"; \
	else echo "Compile rc error!"; exit 1; \
	fi
	
	cp -f $(APP_RC_DIR)/rc  $(FILESYSTEM_DIR)/sbin/
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/rc_init
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/hotplug
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/get_apps_name
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_sd
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_lp
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_sg
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_sr
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_tty
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_usbbcm
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/asus_usb_interface
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/tcpcheck
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/wanduck
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/udhcpc_expires
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/udhcpc_bound
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/rc_call
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/ejusb
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/ddns_updated
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/get_apps_name
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/run_app_script
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/write_3g_ppp_conf
ifneq ($(strip $(RTCONFIG_ACCEL_PPTPD)),)
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/run_pptpd
endif
ifneq ($(strip $(RTCONFIG_VPNC)),)
	ln -sf /sbin/rc $(FILESYSTEM_DIR)/sbin/run_vpnc
endif

rc_clean:
	echo "Clean rc"
	$(MAKE) -C $(APP_RC_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/sbin/rc
	rm -rf $(FILESYSTEM_DIR)/sbin/rc_init
	rm -rf $(FILESYSTEM_DIR)/sbin/hotplug
	rm -rf $(FILESYSTEM_DIR)/sbin/get_apps_name
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_sd
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_lp
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_sg
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_sr
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_tty
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_usbbcm
	rm -rf $(FILESYSTEM_DIR)/sbin/asus_usb_interface
	rm -rf $(FILESYSTEM_DIR)/sbin/tcpcheck
	rm -rf $(FILESYSTEM_DIR)/sbin/wanduck
	rm -rf $(FILESYSTEM_DIR)/sbin/udhcpc_expires
	rm -rf $(FILESYSTEM_DIR)/sbin/udhcpc_bound
	rm -rf $(FILESYSTEM_DIR)/sbin/rc_call
	rm -rf $(FILESYSTEM_DIR)/sbin/ejusb
	rm -rf $(FILESYSTEM_DIR)/sbin/ddns_updated
	rm -rf $(FILESYSTEM_DIR)/sbin/get_apps_name
	rm -rf $(FILESYSTEM_DIR)/sbin/run_app_script
	rm -rf $(FILESYSTEM_DIR)/sbin/write_3g_ppp_conf
ifneq ($(strip $(RTCONFIG_ACCEL_PPTPD)),)
	rm -rf $(FILESYSTEM_DIR)/sbin/run_pptpd
endif

#Build libusb0.1.12
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
libusb-0.1.12/Makefile:
	if test ! -e $(APP_LIBUSB0112_DIR)/Makefile; then \
		cd $(APP_LIBUSB0112_DIR) && CFLAGS="-Os -Wall" LIBS="-lpthread" \
		./configure --host=mips-linux --disable-build-docs --disable-dependency-tracking;\
	fi

libusb-0.1.12: libusb-0.1.12/Makefile
	@echo "Build libusb-0.1.12"
	$(MAKE) -C $(APP_LIBUSB0112_DIR)
	if test -e $(APP_LIBUSB0112_DIR)/.libs/libusb-0.1.so.4.4.4; \
	then echo "Compile libusb-0.1.12 success"; \
	else echo "Compile libusb-0.1.12 error!"; exit 1; \
	fi

libusb-0.1.12_clean: libusb-0.1.12/Makefile
	@echo "Clean libusb-0.1.12"
	$(MAKE) -C $(APP_LIBUSB0112_DIR) distclean
else
libusb-0.1.12:
libusb-0.1.12_clean:
endif

#Build libusb10
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
libusb10/Makefile:
	if test ! -e $(APP_LIBUSB10_DIR)/Makefile; then \
		cd $(APP_LIBUSB10_DIR) && CFLAGS="-Os -Wall" LIBS="-lpthread" \
		./configure --host=mips-linux ac_cv_lib_rt_clock_gettime=no;\
	fi

libusb10: libusb10/Makefile
	echo "Build libusb10"
	$(MAKE) -C $(APP_LIBUSB10_DIR)
	if test -e $(APP_LIBUSB10_DIR)/libusb/.libs/libusb-1.0.so.0.0.0; \
	then echo "Compile libusb10 success"; \
	else echo "Compile libusb10 error!"; exit 1; \
	fi
	
	cp -rf $(APP_LIBUSB10_DIR)/libusb/.libs/libusb-1.0.so*  $(FILESYSTEM_DIR)/lib/

libusb10_clean: libusb10/Makefile
	echo "Clean libusb10"
	$(MAKE) -C $(APP_LIBUSB10_DIR) distclean
	rm -rf $(FILESYSTEM_DIR)/lib/libusb-1.0.so*

else
libusb10:
libusb10_clean:
endif

#Build libusb
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
libusb/Makefile:
	if test ! -e $(APP_LIBUSB_DIR)/Makefile; then \
		cd $(APP_LIBUSB_DIR) && CFLAGS="-Os -Wall" \
		./configure --host=mips-linux \
			LIBUSB_1_0_CFLAGS="-I$(APP_LIBUSB10_DIR)/libusb" \
			LIBUSB_1_0_LIBS="-L$(APP_LIBUSB10_DIR)/libusb/.libs -lusb-1.0 -lpthread"; \
	fi

libusb: libusb10 libusb/Makefile
	echo "Build libusb"
	$(MAKE) -C $(APP_LIBUSB_DIR)
	if test -e $(APP_LIBUSB_DIR)/libusb/.libs/libusb-0.1.so.4; \
	then echo "Compile libusb success"; \
	else echo "Compile libusb error!"; exit 1; \
	fi
	
	cp -rf $(APP_LIBUSB_DIR)/libusb/.libs/libusb-0.1.so.4.4.4 $(FILESYSTEM_DIR)/lib/
	cp -rf $(APP_LIBUSB_DIR)/libusb/.libs/libusb-0.1.so.4  $(FILESYSTEM_DIR)/lib/
	cp -rf $(APP_LIBUSB_DIR)/libusb/.libs/libusb.so  $(FILESYSTEM_DIR)/lib/

libusb_clean: libusb/Makefile
	echo "Clean libusb"
	$(MAKE) -C $(APP_LIBUSB_DIR) distclean

	rm -rf $(FILESYSTEM_DIR)/lib/libusb-0.1.so.4.4.4
	rm -rf $(FILESYSTEM_DIR)/lib/libusb-0.1.so.4
	rm -rf $(FILESYSTEM_DIR)/lib/libusb.so
else
libusb:
libusb_clean:
endif

#Build u2ec
ifneq ($(strip $(TCSUPPORT_USBHOST)),)
u2ec:
	echo "Build u2ec"
	$(MAKE) -C $(APP_U2EC_DIR)
	if test -e $(APP_U2EC_DIR)/u2ec; \
	then echo "Compile u2ec success"; \
	else echo "Compile u2ec error!"; exit 1; \
	fi

	cp -f $(APP_U2EC_DIR)/u2ec  $(FILESYSTEM_DIR)/userfs/bin/

u2ec_clean:
	echo "Clean u2ec"
	$(MAKE) -C $(APP_U2EC_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/userfs/bin/u2ec
else
u2ec:
u2ec_clean:
endif

ifneq ($(strip $(TCSUPPORT_USBHOST)),)
lprng/Makefile:
	if test ! -e $(APP_LPRNG_DIR)/Makefile; then \
		cd $(APP_LPRNG_DIR) && CFLAGS="-I$(APP_SHARED_DIR) -I$(APP_TCAPILIB_DIR) -DWINDOW_1 -DTEST_WRITE -DNODEBUG -DLPR_with_ASUS" \
		LDFLAGS="-L$(APP_SHARED_DIR) -lshared -L$(APP_TCAPILIB_DIR) -ltcapi" \
		./configure --host=mips-linux --with-userid=root --with-groupid=root --disable-werror; \
	fi

lprng:
	echo "Build LPRng"
	$(MAKE) -C $(APP_LPRNG_DIR)
	if test -e $(APP_LPRNG_DIR)/src/lpd; \
	then echo "Compile LPRng success"; \
	else echo "Compile LPRng error!"; exit 1; \
	fi

	cp -f $(APP_LPRNG_DIR)/src/lpd $(FILESYSTEM_DIR)/userfs/bin/

lprng_clean:
	echo "Clean LPRng"
	$(MAKE) -C $(APP_LPRNG_DIR) clean

	rm -rf $(FILESYSTEM_DIR)/userfs/bin/lpd
else
lprng:
lprng_clean:
endif

sqlite/Makefile:
	if test ! -e $(APP_SQLITE_DIR)/Makefile; then \
		cd $(APP_SQLITE_DIR) && \
		CFLAGS="-Os $(EXTRACFLAGS) -ffunction-sections -fdata-sections" \
		LDFLAGS="-ffunction-sections -fdata-sections -Wl,--gc-sections" \
		./configure --host=mips-linux --enable-shared --enable-static \
		--disable-readline --disable-dynamic-extensions --enable-threadsafe \
		--disable-dependency-tracking ;\
	fi

sqlite: sqlite/Makefile
	$(MAKE) -C $(APP_SQLITE_DIR) all
	if test -e $(APP_SQLITE_DIR)/.libs/libsqlite3.so; \
	then echo "Compile sqlite success"; \
	else echo "Compile sqlite error!"; exit 1; \
	fi
	$(STRIP) $(APP_SQLITE_DIR)/.libs/libsqlite3.so
	cp -Pf $(APP_SQLITE_DIR)/.libs/libsqlite3.so* $(FILESYSTEM_DIR)/lib/

sqlite_clean: sqlite/Makefile
	$(MAKE) -C $(APP_SQLITE_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/lib/libsqlite3.so*

libxml2/Makefile:
	if test ! -e $(APP_LIBXML2_DIR)/Makefile; then \
		cd $(APP_LIBXML2_DIR) && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		./configure --host=mips-linux --without-python --disable-dependency-tracking ;\
	fi

libxml2: libxml2/Makefile
	$(MAKE) -C $(APP_LIBXML2_DIR) all
	if test -e $(APP_LIBXML2_DIR)/.libs/libxml2.so; \
	then echo "Compile libxml2 success"; \
	else echo "Compile libxml2 error!"; exit 1; \
	fi
	$(STRIP) $(APP_LIBXML2_DIR)/.libs/libxml2.so
	cp -Pf $(APP_LIBXML2_DIR)/.libs/libxml2.so* $(FILESYSTEM_DIR)/lib/

libxml2_clean: libxml2/Makefile
	$(MAKE) -C $(APP_LIBXML2_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/lib/libxml2.so*

pcre/Makefile:
	touch $(APP_PCRE_DIR)/aclocal.m4
	if test ! -e $(APP_PCRE_DIR)/Makefile; then \
		cd $(APP_PCRE_DIR) && \
		CFLAGS="-Os -Wall $(EXTRACFLAGS)" \
		./configure --host=mips-linux --disable-dependency-tracking ;\
	fi
	mkdir -p $(APP_PCRE_DIR)/m4
	# dirty fix of compile error, need to modify
##	git checkout $(APP_PCRE_DIR)/aclocal.m4	

pcre: pcre/Makefile
	$(MAKE) -C $(APP_PCRE_DIR)
	if test -e $(APP_PCRE_DIR)/.libs/libpcre.so; \
	then echo "Compile pcre success"; \
	else echo "Compile pcre error!"; exit 1; \
	fi
	$(STRIP) $(APP_PCRE_DIR)/.libs/libpcre.so
	cp -Pf $(APP_PCRE_DIR)/.libs/libpcre.so* $(FILESYSTEM_DIR)/lib/

pcre_clean: pcre/Makefile
	$(MAKE) -C $(APP_PCRE_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/lib/libpcre.so*

lighttpd/Makefile: shared libdisk sqlite pcre libxml2 openssl samba_webdav
	#if test ! -e $(APP_LIGHTTPD_DIR)/Makefile; then \
		cd $(APP_LIGHTTPD_DIR) && \
		CFLAGS="-I$(APP_PCRE_DIR) -I$(APP_SQLITE_DIR) -I$(APP_TCAPILIB_DIR) -I$(APP_SHARED_DIR) -I$(APP_LIBDISK_DIR) -I$(APP_CURL_DIR)/include -DHAVE_OPENSSL_SSL_H=1 -DHAVE_LIBSSL=1 -DEMBEDDED_EANBLE=1 -DUSE_TCAPI=1" \
		LIBS="-L$(APP_SHARED_DIR) -lshared -L$(APP_TCAPILIB_DIR) -ltcapi -L$(APP_LIBDISK_DIR) -ldisk" \
		LDFLAGS="-ldl -L$(FILESYSTEM_DIR)/lib -L$(APP_OPENSSL_DIR) -L$(APP_PCRE_DIR)/.libs -L$(APP_CURL_DIR)/lib/.libs -lpcre" \
		XML_CFLAGS="-I$(APP_LIBXML2_DIR)/include" \
		XML_LIBS="-L$(APP_LIBXML2_DIR)/.libs -lxml2" \
		SQLITE_CFLAGS="-I$(APP_SQLITE_DIR)" \
		SQLITE_LIBS="-L$(APP_SQLITE_DIR)/.libs -lsqlite3" \
		PCRE_LIB="-L$(APP_PCRE_DIR)/.libs -lpcre" \
		PCRECONFIG="$(APP_PCRE_DIR)/pcre-config" \
		SSL_LIB="-L$(APP_OPENSSL_DIR) -lcrypto -lssl" \
                CURL_CFLAGS="-I$(APP_CURL_DIR)/include" \
                CURL_LIB="-L$(APP_CURL_DIR)/lib/.libs -lcurl" \
		./configure --prefix=$(APP_LIGHTTPD_DIR)/_inst --host=mips-linux \
		--with-pcre PCRECONFIG="$(APP_PCRE_DIR)/pcre-config" \
		--with-smbdav-props \
		--with-openssl=$(APP_OPENSSL_DIR) \
		--with-openssl-includes=$(APP_OPENSSL_DIR)/include/openssl \
		--with-openssl-libs=$(APP_OPENSSL_DIR) \
		--with-smbdav-locks=yes \
		--with-libsmbclient=$(APP_SAMBA_FOR_WEBDAV_DIR)/source3 \
		--without-zlib \
		--without-bzip2 \
		--enable-shared \
		--disable-static ; \
	#fi

lighttpd: lighttpd/Makefile
	$(MAKE) -C $(APP_LIGHTTPD_DIR)
	
	$(STRIP) -s $(APP_LIGHTTPD_DIR)/src/lighttpd
	$(STRIP) -s $(APP_LIGHTTPD_DIR)/src/lighttpd-arpping
	$(STRIP) -s $(APP_LIGHTTPD_DIR)/src/lighttpd-monitor
	$(STRIP) -s $(APP_LIGHTTPD_DIR)/src/.libs/*.so
	cp -rf $(APP_LIGHTTPD_DIR)/src/lighttpd $(FILESYSTEM_DIR)/usr/sbin
	cp -rf $(APP_LIGHTTPD_DIR)/src/lighttpd-arpping $(FILESYSTEM_DIR)/usr/sbin
	cp -rf $(APP_LIGHTTPD_DIR)/src/lighttpd-monitor $(FILESYSTEM_DIR)/usr/sbin
	cp -Pf $(APP_LIGHTTPD_DIR)/src/.libs/*.so $(FILESYSTEM_DIR)/lib/
	cp -rf $(APP_LIGHTTPD_DIR)/external_file/css/ $(FILESYSTEM_DIR)/usr/
	cp -rf $(APP_LIGHTTPD_DIR)/external_file/js/ $(FILESYSTEM_DIR)/usr/
	rm -rf $(FILESYSTEM_DIR)/usr/lighttpd
	mkdir $(FILESYSTEM_DIR)/usr/lighttpd
	cp $(APP_DIR)/public/APP-IPK/SmartSync-ipk/CONTROL/control $(FILESYSTEM_DIR)/usr/lighttpd/smartsync_control

lighttpd_clean: lighttpd/Makefile
	$(MAKE) -C $(APP_LIGHTTPD_DIR) clean
	
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/lighttpd
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/lighttpd-arpping
	rm -rf $(FILESYSTEM_DIR)/usr/sbin/lighttpd-monitor
	rm -rf $(FILESYSTEM_DIR)/lib/mod*.so
	rm -rf $(FILESYSTEM_DIR)/usr/css
	rm -rf $(FILESYSTEM_DIR)/usr/js

openssl/stamp-h1:
	if test ! -e $(APP_OPENSSL_DIR)/stamp-h1; then \
		cd $(APP_OPENSSL_DIR) && \
		./Configure linux-mips --cross-compile-prefix=' ' \
		--install_prefix=$(APP_OPENSSL_DIR)/OPSSL --openssldir='/' \
		-ffunction-sections -fdata-sections -Wl,--gc-sections \
		shared &&\
		touch stamp-h1 ;\
	fi

openssl: openssl/stamp-h1
	$(MAKE) -C $(APP_OPENSSL_DIR)
	$(MAKE) install -C $(APP_OPENSSL_DIR)
	
	$(STRIP) $(APP_OPENSSL_DIR)/OPSSL/lib/libcrypto.so
	cp -Pf $(APP_OPENSSL_DIR)/OPSSL/lib/libcrypto.so* $(FILESYSTEM_DIR)/lib/
	$(STRIP) $(APP_OPENSSL_DIR)/OPSSL/lib/libssl.so
	cp -Pf $(APP_OPENSSL_DIR)/OPSSL/lib/libssl.so* $(FILESYSTEM_DIR)/lib/
	$(STRIP) $(APP_OPENSSL_DIR)/OPSSL/bin/openssl
	cp -f $(APP_OPENSSL_DIR)/OPSSL/bin/openssl $(FILESYSTEM_DIR)/userfs/bin/

openssl_clean:
	rm -rf $(APP_OPENSSL_DIR)/OPSSL
	-@$(MAKE) -C $(APP_OPENSSL_DIR) clean
	rm -rf $(FILESYSTEM_DIR)/lib/libcrypto.so*
	rm -rf $(FILESYSTEM_DIR)/lib/libssl.so*
###	rm -f $(FILESYSTEM_DIR)/userfs/bin/openssl
###	rm -f $(APP_OPENSSL_DIR)/crypto/opensslconf.h
###	rm -f $(APP_OPENSSL_DIR)/include/openssl/opensslconf.h
###	rm -f $(APP_OPENSSL_DIR)/tools/c_rehash
###	rm -f $(APP_OPENSSL_DIR)/Makefile.bak
###	rm -f $(APP_OPENSSL_DIR)/Makefile
	rm -f $(APP_OPENSSL_DIR)/stamp-h1

curl/stamp-h1:
	if test ! -e $(APP_CURL_DIR)/stamp-h1; then \
		cd $(APP_CURL_DIR) && \
		./configure --build=i686-linux --host=mips-linux --enable-http --with-ssl=$(APP_OPENSSL_DIR) && \
		touch stamp-h1; \
	fi

curl: curl/stamp-h1
	$(MAKE) -C $(APP_CURL_DIR)
	if test -e $(APP_CURL_DIR)/lib/.libs/libcurl.so; \
	then echo "Compile curl success"; \
	else echo "Compile curl error!"; exit 1; \
	fi
	$(STRIP) $(APP_CURL_DIR)/lib/.libs/libcurl.so
	cp -Pf $(APP_CURL_DIR)/lib/.libs/libcurl.so* $(FILESYSTEM_DIR)/lib/

curl_clean: curl/stamp-h1
	$(MAKE) -C $(APP_CURL_DIR) clean
###	@find $(APP_CURL_DIR) -name Makefile | xargs rm -f
	rm -rf $(APP_CURL_DIR)/lib/.deps
	rm -f $(APP_CURL_DIR)/tests/configurehelp.pm
	rm -f $(APP_CURL_DIR)/curl-config
	rm -f $(APP_CURL_DIR)/config.status
	rm -f $(APP_CURL_DIR)/config.log
	rm -f $(APP_CURL_DIR)/stamp-h1
	rm -f $(FILESYSTEM_DIR)/lib/libcurl.so*

asuswebstorage:
	$(MAKE) -C $(APP_ASUSWEBSTORAGE_DIR)
	if test -e $(APP_ASUSWEBSTORAGE_DIR)/asuswebstorage; \
	then echo "Compile asuswebstorage success"; \
	else echo "Compile asuswebstorage error!"; exit 1; \
	fi
	$(STRIP) $(APP_ASUSWEBSTORAGE_DIR)/asuswebstorage
	cp -f $(APP_ASUSWEBSTORAGE_DIR)/asuswebstorage $(FILESYSTEM_DIR)/userfs/bin

asuswebstorage_clean:
	$(MAKE) -C $(APP_ASUSWEBSTORAGE_DIR) clean
	rm -f $(FILESYSTEM_DIR)/userfs/bin/asuswebstorage

inotify:
	$(MAKE) -C $(APP_INOTIFY_DIR)
	if test -e $(APP_INOTIFY_DIR)/inotify; \
	then echo "Compile inotify success"; \
	else echo "Compile inotify error!"; exit 1; \
	fi
	$(STRIP) $(APP_INOTIFY_DIR)/inotify
	cp -f $(APP_INOTIFY_DIR)/inotify $(FILESYSTEM_DIR)/userfs/bin

inotify_clean:
	$(MAKE) -C $(APP_INOTIFY_DIR) clean
	rm -f $(FILESYSTEM_DIR)/userfs/bin/inotify

neon/stamp-h1: openssl libxml2 zlib
	if test ! -e $(APP_NEON_DIR)/stamp-h1; then \
		cd $(APP_NEON_DIR) && \
		CFLAGS='-I$(APP_ZLIB_DIR) -I$(APP_LIBXML2_DIR)/include -I$(APP_OPENSSL_DIR)/OPSSL/include' \
		LDFLAGS='-L$(APP_LIBXML2_DIR)/.libs -L$(APP_OPENSSL_DIR)/OPSSL/lib -L$(APP_ZLIB_DIR)' \
		LIBS='-lxml2 -lssl -lcrypto -lz' \
		XML2_CONFIG=$(APP_LIBXML2_DIR)/xml2-config \
		./configure --build=i686-linux --host=mips-linux --target=mips-linux \
		--enable-shared --disable-static --disable-nls --with-zlib --with-ssl=openssl --with-libxml2 \
		--with-libs=$(APP_OPENSSL_DIR)/OPSSL && \
		cp -f config.h src/config.h && \
		touch stamp-h1; \
	fi

neon: neon/stamp-h1
	$(MAKE) -C $(APP_NEON_DIR)
	if test -e $(APP_NEON_DIR)/src/.libs/libneon.so; \
	then echo "Compile neon success"; \
	else echo "Compile neon error!"; exit 1; \
	fi
	$(STRIP) $(APP_NEON_DIR)/src/.libs/libneon.so
	cp -Pf $(APP_NEON_DIR)/src/.libs/libneon.so* $(FILESYSTEM_DIR)/lib/

neon_clean: neon/stamp-h1
	$(MAKE) -C $(APP_NEON_DIR) clean
	rm -f $(APP_NEON_DIR)/stamp-h1
	rm -f $(FILESYSTEM_DIR)/lib/libneon.so*

zlib/stamp-h1:
	if test ! -e $(APP_ZLIB_DIR)/stamp-h1; then \
		cd $(APP_ZLIB_DIR) && \
		./configure --shared --prefix='' && \
		touch stamp-h1; \
	fi

zlib: zlib/stamp-h1
	$(MAKE) -C $(APP_ZLIB_DIR)
	if test -e $(APP_ZLIB_DIR)/libz.so; \
	then echo "Compile zlib success"; \
	else echo "Compile zlib error!"; exit 1; \
	fi
	$(STRIP) $(APP_ZLIB_DIR)/libz.so
	cp -Pf $(APP_ZLIB_DIR)/libz.so* $(FILESYSTEM_DIR)/lib/
zlib_clean: zlib/stamp-h1
	$(MAKE) -C $(APP_ZLIB_DIR) clean
	rm -f $(FILESYSTEM_DIR)/lib/libz.so*

webdav_client:
	$(MAKE) -C $(APP_WEBDAVCLIENT_DIR)
	@if test -e $(APP_WEBDAVCLIENT_DIR)/webdav_client; \
	then echo "Compile webdav_client success"; \
	else echo "Compile webdav_client error!"; exit 1; \
	fi
	$(STRIP) $(APP_WEBDAVCLIENT_DIR)/webdav_client
	cp -f $(APP_WEBDAVCLIENT_DIR)/webdav_client $(FILESYSTEM_DIR)/userfs/bin/

webdav_client_clean:
	$(MAKE) -C $(APP_WEBDAVCLIENT_DIR) clean
	rm -f $(FILESYSTEM_DIR)/userfs/bin/webdav_client

udpxy:
	$(MAKE) -C $(APP_UDPXY)
	@if test -e $(APP_UDPXY)/udpxy; \
	then echo "Compile udpxy success"; \
	else echo "Compile udpxy error!"; exit 1; \
	fi
	cp -f $(APP_UDPXY)/udpxy $(FILESYSTEM_DIR)/usr/sbin/
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/udpxy

udpxy_clean:
	$(MAKE) -C $(APP_UDPXY) clean
	rm -f $(FILESYSTEM_DIR)/usr/sbin/udpxy

ifneq ($(strip $(ASUS_VPNC)),)
accel_pptp/stamp-h1:
	if test ! -e $(APP_ACCEL_PPTP)/stamp-h1; then \
		cd $(APP_ACCEL_PPTP) && CFLAGS="-g -O2 -I$(KERNEL_DIR)/include $(if $(RTCONFIG_VPNC), -DRTCONFIG_VPNC,)" \
		./configure --prefix=/usr --host=mips-linux KDIR=$(KERNEL_DIR) PPPDIR=$(APP_PPPD_DIR) && \
		touch stamp-h1; \
	fi

accel_pptp: pppd accel_pptp/stamp-h1
	$(MAKE) -C $(APP_ACCEL_PPTP)

	if test ! -d $(FILESYSTEM_DIR)/usr/lib; \
	then mkdir $(FILESYSTEM_DIR)/usr/lib; \
	fi

	if test ! -d $(FILESYSTEM_DIR)/usr/lib/pppd; \
	then mkdir $(FILESYSTEM_DIR)/usr/lib/pppd; \
	fi
	
	cp $(APP_ACCEL_PPTP)/src/.libs/pptp.so $(FILESYSTEM_DIR)/usr/lib/pppd/pptp.so
	$(STRIP) $(FILESYSTEM_DIR)/usr/lib/pppd/pptp.so

accel_pptp_clean:
	-@$(MAKE) -C $(APP_ACCEL_PPTP) clean
	rm -f $(FILESYSTEM_DIR)/usr/lib/pppd/pptp.so

else
accel_pptp:
accel_pptp_clean:
endif

ifneq ($(strip $(ASUS_VPNC)),)
rp_l2tp/stamp-h1:
	if test ! -e $(APP_RP_L2TP)/stamp-h1; then \
		cd $(APP_RP_L2TP) && CFLAGS="-g -O2 -I$(KERNEL_DIR)/include $(if $(RTCONFIG_VPNC), -DRTCONFIG_VPNC,)" \
		./configure --prefix=/usr --host=mips-linux --sysconfdir=/tmp && \
		touch stamp-h1; \
	fi

rp_l2tp: pppd rp_l2tp/stamp-h1
	$(MAKE) -C $(APP_RP_L2TP)

	if test ! -d $(FILESYSTEM_DIR)/usr/lib; \
	then mkdir $(FILESYSTEM_DIR)/usr/lib; \
	fi

	if test ! -d $(FILESYSTEM_DIR)/usr/lib/pppd; \
	then mkdir $(FILESYSTEM_DIR)/usr/lib/pppd; \
	fi

	if test ! -d $(FILESYSTEM_DIR)/usr/lib/l2tp; \
	then mkdir $(FILESYSTEM_DIR)/usr/lib/l2tp; \
	fi
	
	cp $(APP_PPPD_DIR)/pppd/plugins/pppol2tp/pppol2tp.so $(FILESYSTEM_DIR)/usr/lib/pppd/pppol2tp.so
	$(STRIP) $(FILESYSTEM_DIR)/usr/lib/pppd/pppol2tp.so
	
	cp $(APP_RP_L2TP)/handlers/*.so $(FILESYSTEM_DIR)/usr/lib/l2tp
	$(STRIP) $(FILESYSTEM_DIR)/usr/lib/l2tp/*.so
	cp $(APP_RP_L2TP)/handlers/l2tp-control $(FILESYSTEM_DIR)/usr/sbin/l2tp-control
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/l2tp-control
	cp $(APP_RP_L2TP)/l2tpd $(FILESYSTEM_DIR)/usr/sbin/l2tpd
	$(STRIP) $(FILESYSTEM_DIR)/usr/sbin/l2tpd

rp_l2tp_clean:
	-@$(MAKE) -C $(APP_RP_L2TP) clean
	rm -f $(FILESYSTEM_DIR)/usr/lib/l2tp/*.so
	rm -f $(FILESYSTEM_DIR)/usr/sbin/l2tp-control
	rm -f $(FILESYSTEM_DIR)/usr/sbin/l2tpd

else
rp_l2tp:
rp_l2tp_clean:
endif

buildimage:
#	echo "buildimage: copy public tools"
#	cp $(APP_PUBLIC_DIR)/tools/bonnie++ $(FILESYSTEM_DIR)/userfs/bin/bonnie++
ifeq ($(strip $(PROFILE)), dsl-n66u)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n55u-c1)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n16u)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n14u)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n14u-b1)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n12u-c1)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n12u-d1)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif
ifeq ($(strip $(PROFILE)), dsl-n12u-c1_dodo)
	cp $(APP_PUBLIC_DIR)/tools/tcpdump $(FILESYSTEM_DIR)/userfs/bin
endif

	echo "buildimage: copy dmt driver"
#3085 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3085)),)
	cp $(DMT_DIR)/afe3085/tc3162_dmt.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
#3086 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3086)),)
ifneq ($(strip $(TCSUPPORT_CPU_TC3162)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_L5P5.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_3162u.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifeq ($(strip $(PROFILE)),tc3162u_cht)
	cp $(DMT_DIR)/3086/tc3162_dmt_cht.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_3262.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	cp $(DMT_DIR)/3086/tc3162_dmt_3182.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
#3087 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3087)),)
ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63260.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	cp $(DMT_DIR)/3087/tc3162_dmt_rt63365.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
#3095 DMT
ifneq ($(strip $(TCSUPPORT_DMT_3095)),)
ifneq ($(strip $(TCSUPPORT_CPU_RT65168)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
ifneq ($(strip $(TCSUPPORT_AUTOBENCH_DMT3095)),)
	cp $(DMT_DIR)/afe3095/tc3162_dmt_rt65168_3095.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
else
	cp $(DMT_DIR)/afe3095/tc3162_dmt_rt65168.ko $(FILESYSTEM_DIR)/lib/modules/tc3162_dmt.ko
endif
endif
endif

#generate modules dependancy for modprobe
	rm -f $(FILESYSTEM_DIR)/lib/modules/modules.dep
	depmod.pl -k $(KERNEL_DIR)/vmlinux -F $(KERNEL_DIR)/System.map -b $(FILESYSTEM_DIR)/lib/modules/

	echo "buildimage: copy libs"
ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux)
	cp -rf $(PROJECT_LIB_DIR)/mips-linux/. $(FILESYSTEM_DIR)/lib/
endif

ifeq ($(strip $(COMPILE_TOOLCHAIN)),mips-linux-uclibc)
	cp -rf $(PROJECT_LIB_DIR)/mips-linux-uclibc/. $(FILESYSTEM_DIR)/lib/
endif

	#echo "mknod for dev"
	rm -rf $(FILESYSTEM_DIR)/dev/*
	mkdir $(FILESYSTEM_DIR)/dev/pts
	mkdir $(FILESYSTEM_DIR)/dev/shm
	mknod $(FILESYSTEM_DIR)/dev/console c 4 64
	mknod $(FILESYSTEM_DIR)/dev/gpio c 10 123
	mknod $(FILESYSTEM_DIR)/dev/led c 10 151
ifneq ($(strip $(TCSUPPORT_PORTBIND)),)
	mknod $(FILESYSTEM_DIR)/dev/pmap c 200 0
endif
ifneq ($(strip $(TCSUPPORT_QOS)),)
	mknod $(FILESYSTEM_DIR)/dev/qostype c 111 2
endif
	mknod $(FILESYSTEM_DIR)/dev/mtd b 31 0
	mknod $(FILESYSTEM_DIR)/dev/mtd0 c 90 0
	mknod $(FILESYSTEM_DIR)/dev/mtd1 c 90 2
	mknod $(FILESYSTEM_DIR)/dev/mtd2 c 90 4
	mknod $(FILESYSTEM_DIR)/dev/mtd3 c 90 6
	mknod $(FILESYSTEM_DIR)/dev/mtd4 c 90 8
	mknod $(FILESYSTEM_DIR)/dev/mtd5 c 90 10
ifneq ($(strip $(TCSUPPORT_DUAL_IMAGE)),)
	mknod $(FILESYSTEM_DIR)/dev/mtd6 c 90 12
	mknod $(FILESYSTEM_DIR)/dev/mtd7 c 90 14
	mknod $(FILESYSTEM_DIR)/dev/mtd8 c 90 16
endif
	mknod $(FILESYSTEM_DIR)/dev/mtdblock0 b 31 0
	mknod $(FILESYSTEM_DIR)/dev/mtdblock1 b 31 1
	mknod $(FILESYSTEM_DIR)/dev/mtdblock2 b 31 2
	mknod $(FILESYSTEM_DIR)/dev/mtdblock3 b 31 3
	mknod $(FILESYSTEM_DIR)/dev/mtdblock4 b 31 4
	mknod $(FILESYSTEM_DIR)/dev/mtdblock5 b 31 5
ifneq ($(strip $(TCSUPPORT_DUAL_IMAGE)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock6 b 31 6
	mknod $(FILESYSTEM_DIR)/dev/mtdblock7 b 31 7
	mknod $(FILESYSTEM_DIR)/dev/mtdblock8 b 31 8
endif
ifneq ($(strip $(TCSUPPORT_MULTI_BOOT)),)
ifneq ($(strip $(TCSUPPORT_DUAL_IMAGE)),)
	mknod $(FILESYSTEM_DIR)/dev/mtdblock9 b 31 9
else
	mknod $(FILESYSTEM_DIR)/dev/mtdblock6 b 31 6
endif
endif
	mknod $(FILESYSTEM_DIR)/dev/null c 1 3
	mknod $(FILESYSTEM_DIR)/dev/ppp c 108 0
	mknod $(FILESYSTEM_DIR)/dev/ptmx c 5 2
	mknod $(FILESYSTEM_DIR)/dev/ptyp0 c 2 0
	mknod $(FILESYSTEM_DIR)/dev/ptyp1 c 2 1
	mknod $(FILESYSTEM_DIR)/dev/ptyp2 c 2 2
	mknod $(FILESYSTEM_DIR)/dev/sda b 8 0
	mknod $(FILESYSTEM_DIR)/dev/sda1 b 8 1
	mknod $(FILESYSTEM_DIR)/dev/sda2 b 8 2
	mknod $(FILESYSTEM_DIR)/dev/sdb b 8 16
	mknod $(FILESYSTEM_DIR)/dev/sdb1 b 8 17
	mknod $(FILESYSTEM_DIR)/dev/sdb2 b 8 18
	mknod $(FILESYSTEM_DIR)/dev/tty c 5 0
	mknod $(FILESYSTEM_DIR)/dev/tty0 c 4 0
	mknod $(FILESYSTEM_DIR)/dev/ttyp0 c 3 0
	mknod $(FILESYSTEM_DIR)/dev/ttyp1 c 3 1
	mknod $(FILESYSTEM_DIR)/dev/ttyp2 c 3 2
	mknod $(FILESYSTEM_DIR)/dev/ttyS0 c 4 64
	mknod $(FILESYSTEM_DIR)/dev/urandom c 1 9
	mknod $(FILESYSTEM_DIR)/dev/watchdog c 10 130
	mknod $(FILESYSTEM_DIR)/dev/zero c 1 5

ifneq ($(strip $(TCSUPPORT_USB_NTFS)),)
	mknod $(FILESYSTEM_DIR)/dev/fuse c 10 229
	mkdir $(FILESYSTEM_DIR)/dev/misc
	mknod $(FILESYSTEM_DIR)/dev/misc/fuse c 10 229
endif
	mkdir $(FILESYSTEM_DIR)/dev/usb
ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB0 c 188 0
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB1 c 188 1
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB2 c 188 2
	mknod $(FILESYSTEM_DIR)/dev/ttyUSB3 c 188 3
endif
ifneq ($(strip $(TCSUPPORT_USB_PRINTER_SERVER)),)	
	mknod $(FILESYSTEM_DIR)/dev/usb/lp0 c 180 0
	chmod 666 $(FILESYSTEM_DIR)/dev/usb/lp0
endif

ifneq ($(strip $(TCSUPPORT_USB_CAMERA)),)
	mknod $(FILESYSTEM_DIR)/dev/usb/video0 c 81 0
	chmod 666 $(FILESYSTEM_DIR)/dev/usb/video0
	ln -s /dev/usb/video0 $(FILESYSTEM_DIR)/dev/video0
endif

ifneq ($(strip $(TCSUPPORT_CT_ACCESSLIMIT)),)
	mknod $(FILESYSTEM_DIR)/dev/accesslimit c 123 0
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_SYSLOG)),)
	ln -s /tmp/log $(FILESYSTEM_DIR)/dev/log
endif
else
ifneq ($(strip $(TCSUPPORT_SYSLOG)),)
	ln -s /var/log/log $(FILESYSTEM_DIR)/dev/log
endif
endif

	echo "buildimage: copy voip PCM ,DSP and SLIC drivers"
ifneq ($(strip $(TCSUPPORT_VOIP)),)
	mknod $(FILESYSTEM_DIR)/dev/AclDsp c 234 0
	mknod $(FILESYSTEM_DIR)/dev/FxsDrv c 235 0
endif

ifneq ($(strip $(TCSUPPORT_RA_HWNAT)),)
	mknod $(FILESYSTEM_DIR)/dev/hwnat0 c 220 0
	mknod $(FILESYSTEM_DIR)/dev/acl0 c 230 0
	mknod $(FILESYSTEM_DIR)/dev/ac0 c 240 0
	mknod $(FILESYSTEM_DIR)/dev/mtr0 c 250 0
endif

#Copy profile to filesystem
	rm -f $(FILESYSTEM_DIR)/userfs/profile.cfg
	cp $(PROFILE_DIR)/$(PROFILE).profile $(FILESYSTEM_DIR)/userfs/profile.cfg
	chmod 777 $(FILESYSTEM_DIR)/userfs/profile.cfg

#generate RcS and copy RcS(No needed), rcS file will modify in filesystem
#	rm -f $(FILESYSTEM_DIR)/usr/etc/init.d/rcS
#	cp $(PROJECT_AUTOCONFIG_DIR)/rcStemplate $(FILESYSTEM_DIR)/usr/etc/init.d/rcS


#copy certificates
ifneq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
	if test -d  $(FILESYSTEM_DIR)/usr/etc/802_1X; \
	then rm -rf $(FILESYSTEM_DIR)/usr/etc/802_1X; \
	fi
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/Certificates
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/CA
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEY
	mkdir  $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEYPASSWD	
	cp -rf $(APP_8021X_PARA_DIR)/Certificates/* $(FILESYSTEM_DIR)/usr/etc/802_1X/Certificates/
	cp -rf $(APP_8021X_PARA_DIR)/CA/* $(FILESYSTEM_DIR)/usr/etc/802_1X/CA/
	cp -rf $(APP_8021X_PARA_DIR)/PKEY/* $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEY/
	cp -rf $(APP_8021X_PARA_DIR)/PKEYPASSWD/* $(FILESYSTEM_DIR)/usr/etc/802_1X/PKEYPASSWD/
	chmod 777 -R $(FILESYSTEM_DIR)/usr/etc/802_1X/
endif

#copy led conf file
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	echo "copy led conf file"
ifneq ($(strip $(TCSUPPORT_CPU_TC3162)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162 $(FILESYSTEM_DIR)/userfs/led.conf
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3162U)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_WLAN_WPS)),)	
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)	
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u_wps $(FILESYSTEM_DIR)/userfs/led.conf
endif
else
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)	
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3162u $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63260)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63260_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63260 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3262)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3262 $(FILESYSTEM_DIR)/userfs/led.conf
endif

ifneq ($(strip $(TCSUPPORT_CPU_TC3182)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3182_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3182 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63165)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63165_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63165 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63365)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
ifeq ($(PROFILE),dsl-n10-c1_dodo)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_dsl-n10-c1 $(FILESYSTEM_DIR)/userfs/led.conf
else
ifeq ($(PROFILE),dsl-n12e-c1_dodo)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_dsl-n12e-c1 $(FILESYSTEM_DIR)/userfs/led.conf
else
ifeq ($(PROFILE),dsl-n12u-c1_dodo)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_dsl-n12u-c1 $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_$(PROFILE) $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT63368)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63365_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt63368 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

ifneq ($(strip $(TCSUPPORT_CPU_RT65168)),)
	rm -f $(FILESYSTEM_DIR)/userfs/led.conf
ifneq ($(strip $(TCSUPPORT_AUTOBENCH)),)
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_3182_autobench $(FILESYSTEM_DIR)/userfs/led.conf
else
	cp $(APP_PRIVATE_DIR)/led_conf/led.conf_rt65168 $(FILESYSTEM_DIR)/userfs/led.conf
endif
endif

#endif
	#copy if user modify led.conf for ssw test
	if test -e $(PROFILE_DIR)/led.conf; \
	then cp $(PROFILE_DIR)/led.conf $(FILESYSTEM_DIR)/userfs/led.conf; \
	fi
	dos2unix $(FILESYSTEM_DIR)/userfs/led.conf

#copy romfile.cfg
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
#Copy profile to filesystem, no needed, /userfs/romfile.cfg will contain all cfg node
#	cp $(APP_PRIVATE_DIR)/etc_script/romfile.cfg $(FILESYSTEM_DIR)/userfs/
	cp $(APP_PRIVATE_DIR)/etc_script/fwver.conf $(APP_PRIVATE_DIR)/etc_script/.fwver.tmpfile
	cat $(APP_PRIVATE_DIR)/etc_script/.fwver.tmpfile | tr -d '\r\n' > $(APP_PRIVATE_DIR)/etc_script/fwver.conf
	rm -f $(APP_PRIVATE_DIR)/etc_script/.fwver.tmpfile
	cp $(APP_PRIVATE_DIR)/etc_script/fwver.conf $(FILESYSTEM_DIR)/usr/etc/
ifneq ($(strip $(PROFILE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/romfile.cfg.$(PROFILE) $(FILESYSTEM_DIR)/userfs/romfile.cfg
	cp $(APP_PRIVATE_DIR)/etc_script/gatedesc.xml.$(PROFILE) $(FILESYSTEM_DIR)/usr/etc/igd/gatedesc.xml
endif

#if !defined(TCSUPPORT_TTNET)
ifneq ($(strip $(TCSUPPORT_TTNET)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/vserver_ttnet.sh $(FILESYSTEM_DIR)/usr/script/vserver.sh
endif
#endif

#if !defined(TCSUPPORT_TURKISH)
ifneq ($(strip $(TCSUPPORT_TURKISH)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string1.conf $(FILESYSTEM_DIR)/userfs/string1.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/string2.conf $(FILESYSTEM_DIR)/userfs/string2.conf
	cp $(APP_PRIVATE_DIR)/etc_script/ttnet/vserver_ttnet.sh $(FILESYSTEM_DIR)/usr/script/vserver.sh
endif
#endif


#endif

#	$(TOOLS_DIR)/romfile_merge/romfile_merge $(APP_PRIVATE_DIR)/etc_script/romfile.cfg $(APP_PRIVATE_DIR)/etc_script/$(CUSTOM)/romfile.cfg $(FILESYSTEM_DIR)/userfs/romfile.cfg $(APP_CFG_MANAGER_DIR)/cfg_mgr.cfg Project/profile/$(CUSTOM)/$(PROFILE)/$(PROFILE).profile


#copy script
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)

	echo "copy script"
	cp $(APP_PRIVATE_DIR)/etc_script/start_pppoe_relay.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/wan_start.sh $(FILESYSTEM_DIR)/usr/script/wan_start_ipv4.sh
	# cp $(APP_PRIVATE_DIR)/etc_script/wan_stop.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/wan_stop_asus.sh $(FILESYSTEM_DIR)/usr/script/wan_stop.sh
	cp $(APP_PRIVATE_DIR)/etc_script/ppp_start.sh $(FILESYSTEM_DIR)/usr/script/
ifneq ($(strip $(ASUS_WEBDAV)),)
	cp $(APP_PRIVATE_DIR)/etc_script/gencert.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/openssl.cnf $(FILESYSTEM_DIR)/usr/etc/
endif
ifneq ($(strip $(TCSUPPORT_DSLITE)),)
	cp $(APP_PRIVATE_DIR)/etc_script/dslite_start.sh $(FILESYSTEM_DIR)/usr/script/
endif
	# modify in filesystem
	cp $(APP_PRIVATE_DIR)/etc_script/udhcpc_nodef.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/udhcpc.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/nat_start.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/nat_stop.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/filter_forward_start.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/filter_forward_stop.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/before_web_upgrade.sh $(FILESYSTEM_DIR)/usr/script/
ifneq ($(strip $(TCSUPPORT_ALIASIP)),)	
	cp $(APP_PRIVATE_DIR)/etc_script/lanAlias_start.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PRIVATE_DIR)/etc_script/lanAlias_stop.sh $(FILESYSTEM_DIR)/usr/script/
endif
ifneq ($(strip $(TCSUPPORT_CWMP)),)
	cp $(APP_PRIVATE_DIR)/etc_script/devInf.conf $(FILESYSTEM_DIR)/usr/etc/
endif
ifneq ($(strip $(TCSUPPORT_WPA_SUPPLICANT)),)
	cp $(APP_PRIVATE_DIR)/etc_script/8021xaction.sh $(FILESYSTEM_DIR)/usr/etc/
endif
ifneq ($(strip $(TCSUPPORT_IPV6)),)
#	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	# cp $(APP_PRIVATE_DIR)/etc_script/wan_start_ipv6.sh $(FILESYSTEM_DIR)/usr/script/wan_start_ipv6.sh
	cp $(APP_PRIVATE_DIR)/etc_script/wan_start_ipv6_asus.sh $(FILESYSTEM_DIR)/usr/script/wan_start_ipv6.sh
ifneq ($(strip $(TCSUPPORT_IPV6_PRIVACYADDRS)),)
	cp $(APP_PRIVATE_DIR)/etc_script/ipv6-up-privacyaddrs $(FILESYSTEM_DIR)/usr/etc/ppp/ipv6-up
else
	cp $(APP_PRIVATE_DIR)/etc_script/ipv6-up $(FILESYSTEM_DIR)/usr/etc/ppp/
endif
	chmod 777 $(FILESYSTEM_DIR)/usr/etc/ppp/ipv6-up
endif
#ifneq ($(strip $(TCSUPPORT_DNSEACHPVC)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/resolv.conf
	cp $(APP_PRIVATE_DIR)/etc_script/resolv_ipv6.conf $(FILESYSTEM_DIR)/usr/etc/resolv_ipv6.conf
	cp $(APP_PRIVATE_DIR)/etc_script/resolv_ipv4.conf $(FILESYSTEM_DIR)/usr/etc/resolv_ipv4.conf
#else
#	rm -f $(FILESYSTEM_DIR)/usr/etc/resolv.conf
#	rm -f $(FILESYSTEM_DIR)/usr/etc/dnsmasq.conf
#	cp $(APP_PRIVATE_DIR)/etc_script/resolv_noeach.conf $(FILESYSTEM_DIR)/usr/etc/resolv.conf
#	cp $(APP_PRIVATE_DIR)/etc_script/dnsmasq.conf $(FILESYSTEM_DIR)/usr/etc/dnsmasq.conf
#endif
ifneq ($(strip $(TCSUPPORT_FW_UPGRADE_16M)),)
	cp $(APP_PRIVATE_DIR)/etc_script/before_web_download.sh $(FILESYSTEM_DIR)/usr/script/before_web_download.sh
	cp $(APP_PRIVATE_DIR)/etc_script/before_web_download_remove_wifi.sh $(FILESYSTEM_DIR)/usr/script/before_web_download_remove_wifi.sh
	cp $(APP_PRIVATE_DIR)/etc_script/before_tr069_download.sh $(FILESYSTEM_DIR)/usr/script/before_tr069_download.sh
endif
#copy inittab shell script
ifeq ($(strip $(TCSUPPORT_CT)),)
	cp $(APP_PRIVATE_DIR)/etc_script/inittab_ra_menu $(FILESYSTEM_DIR)/usr/etc/inittab_ra_menu
	cp $(APP_PRIVATE_DIR)/etc_script/inittab $(FILESYSTEM_DIR)/usr/etc/inittab_no_ra_menu
endif

#copy asus apps scripts
	cp $(APP_PUBLIC_DIR)/apps_scripts/app_*.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PUBLIC_DIR)/apps_scripts/asusrouter $(FILESYSTEM_DIR)/usr/.asusrouter
ifneq ($(strip $(TCSUPPORT_USB_3G_DONGLE)),)
	cp $(APP_PUBLIC_DIR)/apps_scripts/find_modem_*.sh $(FILESYSTEM_DIR)/usr/script/
	cp $(APP_PUBLIC_DIR)/apps_scripts/modem_*.sh $(FILESYSTEM_DIR)/usr/script/
endif

#copy webs_upgrade.sh
	cp $(APP_PRIVATE_DIR)/etc_script/webs_upgrade.sh $(FILESYSTEM_DIR)/usr/script/webs_upgrade.sh
#copy webs_upgrade2.sh for AiCloud live update
	cp $(APP_PRIVATE_DIR)/etc_script/webs_upgrade2.sh $(FILESYSTEM_DIR)/usr/script/webs_upgrade2.sh

#for ASUS Router (AiHome) APP
	cp $(APP_PRIVATE_DIR)/etc_script/upload_config.sh $(FILESYSTEM_DIR)/usr/script/upload_config.sh

#copy public.pem
ifneq ("$(wildcard $(APP_CFG_MANAGER_DIR)/public.pem)","")
	cp $(APP_CFG_MANAGER_DIR)/public.pem $(FILESYSTEM_DIR)/usr/etc/public.pem
endif

#copy notif_update.sh
	cp $(APP_PRIVATE_DIR)/etc_script/notif_update.sh $(FILESYSTEM_DIR)/usr/script/notif_update.sh

#copy check_spectrum.sh
ifneq ($(strip $(ASUS_SPECTRUM)),)
	cp $(APP_PRIVATE_DIR)/etc_script/check_spectrum.sh $(FILESYSTEM_DIR)/usr/script/check_spectrum.sh
endif


	chmod 755 $(FILESYSTEM_DIR)/usr/script/*

ifneq ($(strip $(TCSUPPORT_BB_NAND)),)
	rm -f $(FILESYSTEM_DIR)/usr/*.ipk
	cp $(APP_PUBLIC_DIR)/usb_apps/* $(FILESYSTEM_DIR)/usr/
	cp $(APP_PUBLIC_DIR)/apps_scripts/optware.asus $(FILESYSTEM_DIR)/usr/
endif

#endif

ifeq ($(strip $(TCSUPPORT_CT)),)
ifneq ($(strip $(TCSUPPORT_IPV6)),)
	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	cp $(FILESYSTEM_DIR)/usr/script/wan_start_ipv6.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
else
	rm -f $(FILESYSTEM_DIR)/usr/script/wan_start.sh
	cp $(FILESYSTEM_DIR)/usr/script/wan_start_ipv4.sh $(FILESYSTEM_DIR)/usr/script/wan_start.sh
endif

ifneq ($(strip $(TCSUPPORT_IPV6)),)
	cp $(FILESYSTEM_DIR)/usr/etc/resolv_ipv6.conf $(FILESYSTEM_DIR)/usr/etc/resolv.conf
else
	cp $(FILESYSTEM_DIR)/usr/etc/resolv_ipv4.conf $(FILESYSTEM_DIR)/usr/etc/resolv.conf
endif
endif

# ifneq ($(strip $(TCSUPPORT_IPV6_INETD)),)
	# cp $(APP_DIR)/private/etc_script/inetd6.conf $(FILESYSTEM_DIR)/usr/etc/inetd.conf
# else
	# cp $(APP_DIR)/private/etc_script/inetd.conf $(FILESYSTEM_DIR)/usr/etc/inetd.conf
# endif


#copy inittab shell script
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(TCSUPPORT_RA_MENU)),)
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab
	cp $(FILESYSTEM_DIR)/usr/etc/inittab_ra_menu $(FILESYSTEM_DIR)/usr/etc/inittab
endif
else
ifeq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab
	cp $(FILESYSTEM_DIR)/usr/etc/inittab_no_ra_menu $(FILESYSTEM_DIR)/usr/etc/inittab
endif
endif
ifneq ($(strip $(TCSUPPORT_CT)),)
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab_ra_menu
	rm -f $(FILESYSTEM_DIR)/usr/etc/inittab_no_ra_menu
endif
#endif


#copy string
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
ifneq ($(strip $(GUI_STRING_CONFIG_SUPPORT)),)
	cp $(APP_DIR)/private/etc_script/*.dict $(FILESYSTEM_DIR)/userfs/
ifeq ($(PROFILE),dsl-n10-c1_dodo)
	sed -i 's/ZVMODELVZ/'DSL-N10_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12e-c1_dodo)
	sed -i 's/ZVMODELVZ/'DSL-N12E_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12u-c1_dodo)
	sed -i 's/ZVMODELVZ/'DSL-N12U_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n10-c1)
	sed -i 's/ZVMODELVZ/'DSL-N10_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12e-c1)
	sed -i 's/ZVMODELVZ/'DSL-N12E_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n10-d1)
	sed -i 's/ZVMODELVZ/'DSL-N10_D1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12u-c1)
	sed -i 's/ZVMODELVZ/'DSL-N12U_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12u-d1)
	sed -i 's/ZVMODELVZ/'DSL-N12U_D1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n55u-c1)
	sed -i 's/ZVMODELVZ/'DSL-N55U_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
	sed -i 's/ZVMODELVZ/'$(UC_PROFILE)'/g' $(FILESYSTEM_DIR)/userfs/*.dict
endif
endif
endif
endif
endif
endif
endif
endif
#endif

ifneq ($(strip $(TCSUPPORT_MODEL_CHECK)),)
	cp $(TOOLS_DIR)/trx/trx_config $(FILESYSTEM_DIR)/usr/etc/trx_config
endif

	chmod 777 $(FILESYSTEM_DIR)/usr/etc/inittab

	chmod 777 -R $(FILESYSTEM_DIR)/usr/etc/init.d

#copy webpages
#ifeq ($(strip $(TC_BUILD_RELEASECODE)),)
	rm -rf $(FILESYSTEM_DIR)/boaroot
	cp -a $(APP_ROUTE_WEBPAGE_DIR) $(FILESYSTEM_DIR)



ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	#rm then copy string file
	rm -rf $(FILESYSTEM_DIR)/userfs/*.dict
	cp $(APP_PRIVATE_DIR)/etc_script/*.dict $(FILESYSTEM_DIR)/userfs/
ifeq ($(PROFILE),dsl-n10-c1_dodo)
	sed -i 's/ZVMODELVZ/'DSL-N10_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12e-c1_dodo)
	sed -i 's/ZVMODELVZ/'DSL-N12E_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12u-c1_dodo)
	sed -i 's/ZVMODELVZ/'DSL-N12U_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n10-c1)
	sed -i 's/ZVMODELVZ/'DSL-N10_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12e-c1)
	sed -i 's/ZVMODELVZ/'DSL-N12E_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n10-d1)
	sed -i 's/ZVMODELVZ/'DSL-N10_D1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12u-c1)
	sed -i 's/ZVMODELVZ/'DSL-N12U_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n12u-d1)
	sed -i 's/ZVMODELVZ/'DSL-N12U_D1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
ifeq ($(PROFILE),dsl-n55u-c1)
	sed -i 's/ZVMODELVZ/'DSL-N55U_C1'/g' $(FILESYSTEM_DIR)/userfs/*.dict
else
	sed -i 's/ZVMODELVZ/'$(UC_PROFILE)'/g' $(FILESYSTEM_DIR)/userfs/*.dict
endif
endif
endif
endif
endif
endif
endif
	rm -rf $(FILESYSTEM_DIR)/boaroot/
	#generage Lang_Hdr
	echo "[Language type]" > $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Lang_Hdr
	echo "CHAR_set=UTF-8" >> $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Lang_Hdr
	echo "PASS_LANG=Language:" >> $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Lang_Hdr
	echo "LANG_select=Select Language" >> $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Lang_Hdr
	grep "^banner_code +='<dd>" $(APP_ASUS_WEBPAGE_DIR)/html/state.js | sed 's/<\/.*//' | awk '{print substr($$0,index($$0,"id=")+3)}' |sed 's/^"/LANG_/'|sed 's/">/=/' >> $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Lang_Hdr
	echo "[End of Language Type]" >> $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Lang_Hdr

	#cp -a $(APP_WEBPAGE_DIR)/Router/ml/boaroot $(FILESYSTEM_DIR)
	cp -a $(APP_ASUS_WEBPAGE_DIR) $(FILESYSTEM_DIR)
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/ISP_List.txt $(FILESYSTEM_DIR)/usr/etc/ISP_List.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/ISP_List_IPTV.txt $(FILESYSTEM_DIR)/usr/etc/ISP_List_IPTV.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/ISP_PTM_List.txt $(FILESYSTEM_DIR)/usr/etc/ISP_PTM_List.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Detect_list_00.txt $(FILESYSTEM_DIR)/usr/etc/Detect_list_00.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Detect_list_01.txt $(FILESYSTEM_DIR)/usr/etc/Detect_list_01.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Detect_list_10.txt $(FILESYSTEM_DIR)/usr/etc/Detect_list_10.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Detect_list_11.txt $(FILESYSTEM_DIR)/usr/etc/Detect_list_11.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Detect_list_20.txt $(FILESYSTEM_DIR)/usr/etc/Detect_list_20.txt
	cp $(APP_ASUS_WEBPAGE_DIR)/cgi-bin/Detect_list_21.txt $(FILESYSTEM_DIR)/usr/etc/Detect_list_21.txt

	
	cd $(TOOLS_DIR)/mlCheckHash/ && chmod 777 mlCheckHash && ./mlCheckHash $(FILESYSTEM_DIR)/userfs/*.dict
	if test -e $(TOOLS_DIR)/mlCheckHash/error; \
	then echo "apps/private/etc_script/*.dict duplicate, please check!"; exit 1; \
	else echo "dict check pass!"; \
	fi
endif

ifeq ($(strip $(PROFILE)),dsl-n12e-c1)
	#Remove USB related GUI.
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/cloud_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_AiDisk_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/aidisk
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/APP_Installation.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/PrinterServer.asp
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/cloudsync
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/PrinterServer.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/mediaserver.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/server.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/modem.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/downloadmaster.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/Aidisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/printstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBdisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/usbstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/aidisk
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBExt

	#Remove the PPTP and L2TP related GUI.
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTP_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTPAdvanced_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_VPNStatus.asp
endif

ifeq ($(strip $(PROFILE)),dsl-n10-d1)
	#Remove USB related GUI.
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/cloud_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_AiDisk_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/aidisk
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/APP_Installation.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/PrinterServer.asp
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/cloudsync
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/PrinterServer.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/mediaserver.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/server.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/modem.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/downloadmaster.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/Aidisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/printstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBdisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/usbstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/aidisk
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBExt

	#Remove the PPTP and L2TP related GUI.
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTP_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTPAdvanced_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_VPNStatus.asp
endif

ifeq ($(strip $(PROFILE)),dsl-n10-c1)
	#Remove USB related GUI.
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/cloud_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_AiDisk_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/aidisk
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/APP_Installation.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/PrinterServer.asp
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/cloudsync
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/PrinterServer.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/mediaserver.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/server.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/modem.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/downloadmaster.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/Aidisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/printstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBdisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/usbstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/aidisk
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBExt

	#Remove the PPTP and L2TP related GUI.
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTP_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTPAdvanced_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_VPNStatus.asp
endif

ifeq ($(strip $(PROFILE)),dsl-n10-c1_dodo)
	#Remove USB related GUI.
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/cloud_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_AiDisk_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/aidisk
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/APP_Installation.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/PrinterServer.asp
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/cloudsync
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/PrinterServer.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/mediaserver.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/server.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/modem.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/downloadmaster.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/Aidisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/printstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBdisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/usbstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/aidisk
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBExt

	#Remove the PPTP and L2TP related GUI.
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTP_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTPAdvanced_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_VPNStatus.asp
endif

ifeq ($(strip $(PROFILE)),dsl-n12e-c1_dodo)
	#Remove USB related GUI.
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/cloud_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_AiDisk_*
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/aidisk
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/APP_Installation.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/PrinterServer.asp
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/cloudsync
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/PrinterServer.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/mediaserver.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/server.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/modem.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/downloadmaster.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/Aidisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/printstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBdisk.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/usbstatus.png
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/aidisk
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/images/New_ui/USBExt

	#Remove the PPTP and L2TP related GUI.
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTP_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_PPTPAdvanced_Content.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Advanced_VPNStatus.asp
endif

ifneq ($(strip $(TCSUPPORT_VIRSVR_LOCAL_PORT)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table.cgi
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/virsvr_table_local_port.cgi; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_WLAN_RT3390)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5392)),)
	#rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	#cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	#rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390)),)
	# rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	# cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	# rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT5390HL)),)
	#rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	#cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	#rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3390.asp
endif
ifneq ($(strip $(TCSUPPORT_WLAN_RT3090)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3090.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/home_wireless_RT3090.asp
endif
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding_signal_port.asp

else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_portbinding_signal_port.asp
endif

ifneq ($(strip $(TCSUPPORT_QOS)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old_four_ports.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp

	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	fi
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
endif
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_signal_port.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old_four_ports.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old_four_ports.asp
ifneq ($(strip $(TCSUPPORT_TC2031)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp

	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi; \
	fi
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist.cgi
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qos_old.asp
ifneq ($(strip $(TCSUPPORT_GENERAL_MULTILANGUAGE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.asp
else
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_qoslist_signal_port.cgi
endif
endif
endif

ifneq ($(strip $(TCSUPPORT_SYSLOG_ENHANCE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log.cgi
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.cgi; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.cgi; \
	fi
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/status_log2.asp; \
	fi
endif

ifneq ($(strip $(TCSUPPORT_ACCOUNT_ACL)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl.asp
	cp $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl_asb.asp $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl.asp
else
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl_asb.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_acl_asb.asp; \
	fi
	if test -e $(FILESYSTEM_DIR)/boaroot/cgi-bin/acl_table.asp; \
	then rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/acl_table.asp; \
	fi
endif


	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/tools_admin_c2.asp
#if !defined(TCSUPPORT_TRUE_LANDING_PAGE)) || !defined(TCSUPPORT_C2_TRUE))
ifeq ($(strip $(TCSUPPORT_TRUE_LANDING_PAGE)),)
ifeq ($(strip $(TCSUPPORT_C2_TRUE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzConnectClose_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzExistAccount_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzIspUserPwd_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzManualConnect_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWait2_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWait3_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWelcome_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wzWiFi_true.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/tools_landingPage.asp
endif
endif	
#endif
	
#if !defined(TCSUPPORT_TIME_OF_DAY))
ifeq ($(strip $(TCSUPPORT_TIME_OF_DAY)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/access_timeofday.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/keyword.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/keywordTimeOfDay.cgi
endif
#endif
	
	
#if !defined(TCSUPPORT_CZ_OTE)
ifeq ($(strip $(TCSUPPORT_CZ_OTE)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wizardPPP_OTE.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/wizStatusInfo_OTE.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/html/red.jpg
	rm -f $(FILESYSTEM_DIR)/boaroot/html/green.jpg
endif
#endif

#if !defined(TCSUPPORT_CZ_OTE_TOOL)
ifeq ($(strip $(TCSUPPORT_CZ_OTE_TOOL)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OTE_index.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OTE_home_wan.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/OTE_status_deviceinfo.asp
endif
#endif



#if !defined(TCSUPPORT_NATSESSIONS_PERUSER_PERIP))
ifeq ($(strip $(TCSUPPORT_BHARTI)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_addsession.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_session.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/adv_nat_session.cgi
endif
#endif

#if !defined(TCSUPPORT_WEB_INTERCEPTION))
ifeq ($(strip $(TCSUPPORT_WEB_INTERCEPTION)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/AdslDownInfo.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/FirmwareUpgradeInfo.asp
endif
#endif

#if !defined(TCSUPPORT_REDIRECT_WLAN_WEB))
ifeq ($(strip $(TCSUPPORT_REDIRECT_WLAN_WEB)),)
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/direct_to_wlan.asp
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/rpSys_Wlan.asp
endif
#endif

#endif

#endif

ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
	cd $(FILESYSTEM_DIR)/boaroot/cgi-bin/ && ls|grep -v "CVS" > ctrl.txt
	make -C $(TOOLS_DIR)/reducer
	if test -e $(TOOLS_DIR)/reducer/Reducer; \
	then cp $(TOOLS_DIR)/reducer/Reducer $(FILESYSTEM_DIR)/boaroot/cgi-bin/; \
	cd $(FILESYSTEM_DIR)/boaroot/cgi-bin/ && ./Reducer; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/*.bak; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/Reducer; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/ctrl.txt; \
	rm -f $(FILESYSTEM_DIR)/boaroot/cgi-bin/basic.pbb; \
	rm -f $(TOOLS_DIR)/reducer/Reducer; \
	echo "Reducer successful!"; \
	else echo "Reducer failed!"; \
	fi
endif

ifeq ($(strip $(TCSUPPORT_SSH)),)
	rm -rf $(FILESYSTEM_DIR)/usr/etc/dropbear
endif

ifneq ($(strip $(TCSUPPORT_SYSLOG_ENHANCE)),)
#ln /dev/log for syslogd
#	ln -s /tmp/log $(FILESYSTEM_DIR)/dev/log
	$(MAKE) -C $(APP_PUBLIC_DIR)/boa-asp/LogFileParser 
	if test -e $(APP_PUBLIC_DIR)/boa-asp/LogFileParser/LogFileParser; \
	then echo "Compile LogFileParser success"; \
	else echo "Compile LogFileParser error!"; exit 1; \
	fi
	cp $(APP_PUBLIC_DIR)/boa-asp/LogFileParser/LogFileParser $(FILESYSTEM_DIR)/usr/bin
endif

ifeq ($(strip $(RTCONFIG_ODMPID)),)
ifneq ($(strip $(UC_PROFILE)),)
ifeq ($(PROFILE),dsl-n10-c1_dodo)
	ln -s /tmp/var/romfile_encrypt.cfg $(FILESYSTEM_DIR)/boaroot/html/Settings_DSL-N10-C1.cfg
else
ifeq ($(PROFILE),dsl-n12e-c1_dodo)
	ln -s /tmp/var/romfile_encrypt.cfg $(FILESYSTEM_DIR)/boaroot/html/Settings_DSL-N12E-C1.cfg
else
ifeq ($(PROFILE),dsl-n12u-c1_dodo)
	ln -s /tmp/var/romfile_encrypt.cfg $(FILESYSTEM_DIR)/boaroot/html/Settings_DSL-N12U-C1.cfg
else
	ln -s /tmp/var/romfile_encrypt.cfg $(FILESYSTEM_DIR)/boaroot/html/Settings_$(UC_PROFILE).cfg
endif
endif
endif
endif
endif
#for ASUS Router (AiHome) APP
	ln -s /tmp/var/romfile_encrypt.cfg $(FILESYSTEM_DIR)/boaroot/html/Config.CFG

	ln -s /var/log/currLogFile $(FILESYSTEM_DIR)/boaroot/html/syslog.xlog
ifneq ($(strip $(TCSUPPORT_DSL_LINE_DIAGNOSTIC)),)
	ln -sf /tmp/TCC.log.gz $(FILESYSTEM_DIR)/boaroot/html/TCC.log.gz
	ln -sf /tmp/TCC.log.a.gz $(FILESYSTEM_DIR)/boaroot/html/TCC.log.a.gz
	ln -sf /tmp/TCC.log.b.gz $(FILESYSTEM_DIR)/boaroot/html/TCC.log.b.gz
	ln -sf /tmp/TCC.log.c.gz $(FILESYSTEM_DIR)/boaroot/html/TCC.log.c.gz
	ln -sf /tmp/TCC.log.d.gz $(FILESYSTEM_DIR)/boaroot/html/TCC.log.d.gz
	ln -sf /tmp/TCC.log.e.gz $(FILESYSTEM_DIR)/boaroot/html/TCC.log.e.gz
	ln -sf /tmp/WiFi.log.gz $(FILESYSTEM_DIR)/boaroot/html/WiFi.log.gz
	ln -sf /tmp/WiFi.log.a.gz $(FILESYSTEM_DIR)/boaroot/html/WiFi.log.a.gz
	ln -sf /tmp/WiFi.log.b.gz $(FILESYSTEM_DIR)/boaroot/html/WiFi.log.b.gz
	ln -sf /tmp/WiFi.log.c.gz $(FILESYSTEM_DIR)/boaroot/html/WiFi.log.c.gz
	ln -sf /tmp/WiFi.log.d.gz $(FILESYSTEM_DIR)/boaroot/html/WiFi.log.d.gz
	ln -sf /tmp/WiFi.log.e.gz $(FILESYSTEM_DIR)/boaroot/html/WiFi.log.e.gz
endif
# ifneq ($(strip $(TCSUPPORT_SYSLOG_ENHANCE)),)
	# ln -s /var/log/currLogFile $(FILESYSTEM_DIR)/boaroot/html/syslog.xlog
# else
	# ln -s /tmp/var/log/messages $(FILESYSTEM_DIR)/boaroot/html/syslog.log
# endif
	rm -rf $(FILESYSTEM_DIR)/boaroot/html/.svn/
	rm -rf $(FILESYSTEM_DIR)/boaroot/.svn/
	rm -rf $(FILESYSTEM_DIR)/boaroot/cgi-bin/.svn/
	
	rm -f $(FILESYSTEM_DIR)/boaroot/boa_CD.conf
	
	chmod 777 $(FILESYSTEM_DIR)/boaroot/cgi-bin/*
#endif //TC_RELEASE_BUILD
#ln tmp,etc & linuxrc
	ln -sf /tmp/cfg_manager $(FILESYSTEM_DIR)/userfs/bin/cfg_manager_1
	ln -sf /tmp/ATE $(FILESYSTEM_DIR)/usr/bin/ATE_1
	rm -f $(FILESYSTEM_DIR)/var
	ln -s /tmp/var $(FILESYSTEM_DIR)/var
	rm -f $(FILESYSTEM_DIR)/etc
	ln -s /tmp/etc $(FILESYSTEM_DIR)/etc
	rm -f $(FILESYSTEM_DIR)/linuxrc
	ln -s bin/busybox $(FILESYSTEM_DIR)/linuxrc	

	rm -rf $(TRUNK_DIR)/tmpfilesys
	mkdir $(TRUNK_DIR)/tmpfilesys
	cp -rf $(FILESYSTEM_DIR) $(TRUNK_DIR)/tmpfilesys

	find $(TRUNK_DIR)/tmpfilesys -name ".svn" | xargs rm -rf
	find $(TRUNK_DIR)/tmpfilesys -name "CVS" | xargs rm -rf

#we create new romfile(with crc checksum) and put it in filesystem,so before creating rootfs,must execute buildromfile.sh first
ifneq ($(strip $(TCSUPPORT_CT_BACKUPROMFILEENCHANCEMENT)),)
	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg $(APP_TCLINUXBUILDER_DIR)
	cd $(APP_TCLINUXBUILDER_DIR) && chmod 777 buildromfile.sh && ./buildromfile.sh
	if test -e $(FILESYSTEM_DIR)/userfs/ctromfile.cfg; \
	then echo "Compile ctromfile.cfg success"; \
	else echo "Compile ctromfile.cfg error!"; exit 1; \
	fi	
endif

ifneq ($(strip $(TCSUPPORT_CODE_SHRINK)),)
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys/filesystem/usr/bin/*
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys/filesystem/userfs/bin/*
	$(STRIP) --strip-unneeded -R .comment  $(TRUNK_DIR)/tmpfilesys/filesystem/lib/modules/*
endif
	$(TOOLS_DIR)/mksquashfs-lzma $(TRUNK_DIR)/tmpfilesys/filesystem $(TRUNK_DIR)/rootfs -be -noappend

	
	cp $(TRUNK_DIR)/rootfs $(APP_TCLINUXBUILDER_DIR)
	rm -f $(TRUNK_DIR)/rootfs
	cp $(KERNEL_DIR)/linux.7z $(APP_TCLINUXBUILDER_DIR)
	
	cp $(FILESYSTEM_DIR)/userfs/romfile.cfg $(APP_TCLINUXBUILDER_DIR)
	cd $(APP_TCLINUXBUILDER_DIR) && ./buildImage.sh
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux.bin $(PROJECT_DIR)/images	
	cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone $(PROJECT_DIR)/images
	#cp $(APP_TCLINUXBUILDER_DIR)/tclinux_allinone.swap $(PROJECT_DIR)/images

# Rename. Sam 2013/3/6
	cd $(APP_TCLINUXBUILDER_DIR) && ./asusRename.sh

#ifeq ($(strip $(RELEASEBSP)),)
#ifeq ($(strip $(CUSTOMERRELEASE)),)
#	rm -rf ../releaseFW/
#	mkdir ../releaseFW/
#	mkdir ../releaseFW/release
#	mkdir ../releaseFW/backup
#	cd $(TRUNK_DIR)/tmpfilesys && tar -czvf filesystem.tgz ./filesystem
#	cp $(TRUNK_DIR)/tmpfilesys/filesystem.tgz ../releaseFW/release/
#	rm -rf $(TRUNK_DIR)/tmpfilesys
#	cp $(BOOTROM_DIR)/mi.conf ../releaseFW/release/
#	cp $(BOOTROM_DIR)/boot.bin ../releaseFW/release/
#	cp $(APP_TCLINUXBUILDER_DIR)/linux.7z ../releaseFW/release/
#	cp $(PROFILE_DIR)/$(PROFILE).profile ../releaseFW/backup
#	cp $(APP_BUSYBOX_DIR)/.config ../releaseFW/backup/busybox.config
#	cp $(KERNEL_DIR)/.config ../releaseFW/backup/kernel.config
#	cp $(KERNEL_DIR)/System.map ../releaseFW/backup/
#	tar -czvf ../releaseFW_$(TCPLATFORM)_`date +%Y%m%d`.tgz ../releaseFW/
#	rm -rf ../releaseFW/ 
#endif
#endif
